
SMART_HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ecc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00002ecc  00002f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008000ae  008000ae  00002fae  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  00002fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000132c  00000000  00000000  00005e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000718c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000072ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000747b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000094c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b544  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b6c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b986  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3d       	cpi	r26, 0xD3	; 211
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <main>
      8a:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e9       	ldi	r22, 0x95	; 149
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_16>:

#if ADC_INTP == ADC_INTP_ENABLE
void __vector_16(void) __attribute__((signal,used));

void __vector_16(void)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	static u8 channel;
#if ADC_RES == ADC_8BIT_RES
		//Save the value
	au32_ChannelValues[channel]=ADCH;
     cc4:	80 91 af 00 	lds	r24, 0x00AF
     cc8:	68 2f       	mov	r22, r24
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	e5 e2       	ldi	r30, 0x25	; 37
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	cb 01       	movw	r24, r22
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	fc 01       	movw	r30, r24
     ce6:	e0 55       	subi	r30, 0x50	; 80
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	20 83       	st	Z, r18
     cec:	31 83       	std	Z+1, r19	; 0x01
     cee:	42 83       	std	Z+2, r20	; 0x02
     cf0:	53 83       	std	Z+3, r21	; 0x03
	channel++;
     cf2:	80 91 af 00 	lds	r24, 0x00AF
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	80 93 af 00 	sts	0x00AF, r24
	if(channel>7)
     cfc:	80 91 af 00 	lds	r24, 0x00AF
     d00:	88 30       	cpi	r24, 0x08	; 8
     d02:	18 f0       	brcs	.+6      	; 0xd0a <__vector_16+0x6c>
		ADC_Flag=1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 ae 00 	sts	0x00AE, r24
	#elif ADC_RES == ADC_10BIT_RES
		au32_ChannelValues[channel] =ADCL | (((u16)ADCH)<<8);	//shifting left the ADCH to get the reading in one step
	#endif
//		SET_BIT(ADCSRA,ADCSRA_ADIF);

}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	ff 91       	pop	r31
     d10:	ef 91       	pop	r30
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <ADC_vidInit>:
 * No input
 * No output
 *
 */
void ADC_vidInit()
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62

	#if ADC_RES == ADC_8BIT_RES
		//Select Adj left
		SET_BIT(ADMUX,ADMUX_ADLAR);
     d34:	a7 e2       	ldi	r26, 0x27	; 39
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e7 e2       	ldi	r30, 0x27	; 39
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	80 62       	ori	r24, 0x20	; 32
     d40:	8c 93       	st	X, r24
		//Select Ref AREF PIN
		CLEAR_BIT(ADMUX,ADMUX_REFS0);
		CLEAR_BIT(ADMUX,ADMUX_REFS1);
	#elif ADC_REF == ADC_AVCC
		//Select Ref AVCC
		SET_BIT(ADMUX,ADMUX_REFS0);
     d42:	a7 e2       	ldi	r26, 0x27	; 39
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e7 e2       	ldi	r30, 0x27	; 39
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	80 64       	ori	r24, 0x40	; 64
     d4e:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,ADMUX_REFS1);
     d50:	a7 e2       	ldi	r26, 0x27	; 39
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e7 e2       	ldi	r30, 0x27	; 39
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8f 77       	andi	r24, 0x7F	; 127
     d5c:	8c 93       	st	X, r24
		SET_BIT(ADMUX,ADMUX_REFS0);
		SET_BIT(ADMUX,ADMUX_REFS1);
	#endif

	#if ADC_INTP == ADC_INTP_ENABLE
		SET_BIT(ADCSRA,ADCSRA_ADIE);
     d5e:	a6 e2       	ldi	r26, 0x26	; 38
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e6 e2       	ldi	r30, 0x26	; 38
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	88 60       	ori	r24, 0x08	; 8
     d6a:	8c 93       	st	X, r24
		SET_BIT(SREG,SREG_GIE);
     d6c:	af e5       	ldi	r26, 0x5F	; 95
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ef e5       	ldi	r30, 0x5F	; 95
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 68       	ori	r24, 0x80	; 128
     d78:	8c 93       	st	X, r24
	#elif ADC_INTP == ADC_INTP_DISABLE
		CLEAR_BIT(ADCSRA,ADCSRA_ADIE);
	#endif

	#if ADC_STATUS == ADC_ENABLE
		SET_BIT(ADCSRA,ADCSRA_ADEN);
     d7a:	a6 e2       	ldi	r26, 0x26	; 38
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e6 e2       	ldi	r30, 0x26	; 38
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	80 68       	ori	r24, 0x80	; 128
     d86:	8c 93       	st	X, r24

		switch (ADC_PRESCALER) {
			case ADC_2PRESCALER:	//PS0,PS2=0
				CLEAR_BIT(ADCSRA,ADCSRA_ADPS0);
     d88:	a6 e2       	ldi	r26, 0x26	; 38
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e6 e2       	ldi	r30, 0x26	; 38
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8e 7f       	andi	r24, 0xFE	; 254
     d94:	8c 93       	st	X, r24
				CLEAR_BIT(ADCSRA,ADCSRA_ADPS1);
     d96:	a6 e2       	ldi	r26, 0x26	; 38
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e6 e2       	ldi	r30, 0x26	; 38
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	8d 7f       	andi	r24, 0xFD	; 253
     da2:	8c 93       	st	X, r24
				CLEAR_BIT(ADCSRA,ADCSRA_ADPS2);
     da4:	a6 e2       	ldi	r26, 0x26	; 38
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e6 e2       	ldi	r30, 0x26	; 38
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	8b 7f       	andi	r24, 0xFB	; 251
     db0:	8c 93       	st	X, r24
				break;
		}
	#endif

	return;
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <ADC_u8GetAdcReading>:
 * Convert function
 *	input: channel num
 *	output: error state
 */
u8 ADC_u8GetAdcReading(u8 COPY_u8Channel ,u32* COPY_pu8Value )
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <ADC_u8GetAdcReading+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <ADC_u8GetAdcReading+0x8>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	8a 83       	std	Y+2, r24	; 0x02
     dc6:	7c 83       	std	Y+4, r23	; 0x04
     dc8:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8Err=0;
     dca:	19 82       	std	Y+1, r1	; 0x01

	if(COPY_pu8Value==Null)
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	19 f4       	brne	.+6      	; 0xdda <ADC_u8GetAdcReading+0x22>
	{
		LOC_u8Err=1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	89 83       	std	Y+1, r24	; 0x01
     dd8:	3b c0       	rjmp	.+118    	; 0xe50 <ADC_u8GetAdcReading+0x98>
	}else if(COPY_u8Channel>ADC_u8MAX_CH_NUM || COPY_u8Channel<0)
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	88 30       	cpi	r24, 0x08	; 8
     dde:	18 f0       	brcs	.+6      	; 0xde6 <ADC_u8GetAdcReading+0x2e>
	{
		LOC_u8Err=1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	35 c0       	rjmp	.+106    	; 0xe50 <ADC_u8GetAdcReading+0x98>
	}else
	{
//Clear prev setting
ADMUX &=(0b11100000);
     de6:	a7 e2       	ldi	r26, 0x27	; 39
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e2       	ldi	r30, 0x27	; 39
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	80 7e       	andi	r24, 0xE0	; 224
     df2:	8c 93       	st	X, r24
//set the channel
ADMUX	|=	COPY_u8Channel;
     df4:	a7 e2       	ldi	r26, 0x27	; 39
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e2       	ldi	r30, 0x27	; 39
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	90 81       	ld	r25, Z
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	89 2b       	or	r24, r25
     e02:	8c 93       	st	X, r24
//Start Conversion
SET_BIT(ADCSRA,ADCSRA_ADSC);
     e04:	a6 e2       	ldi	r26, 0x26	; 38
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e6 e2       	ldi	r30, 0x26	; 38
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	80 64       	ori	r24, 0x40	; 64
     e10:	8c 93       	st	X, r24
	#endif
	//Clear the flag
	SET_BIT(ADCSRA,ADCSRA_ADIF);

#elif ADC_INTP == ADC_INTP_ENABLE
{	if(GET_BIT(ADCSRA,ADCSRA_ADIF))
     e12:	e6 e2       	ldi	r30, 0x26	; 38
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	82 95       	swap	r24
     e1a:	8f 70       	andi	r24, 0x0F	; 15
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	81 70       	andi	r24, 0x01	; 1
     e22:	90 70       	andi	r25, 0x00	; 0
     e24:	88 23       	and	r24, r24
     e26:	a1 f0       	breq	.+40     	; 0xe50 <ADC_u8GetAdcReading+0x98>
		*COPY_pu8Value=au32_ChannelValues[COPY_u8Channel];
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	88 2f       	mov	r24, r24
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	fc 01       	movw	r30, r24
     e38:	e0 55       	subi	r30, 0x50	; 80
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	a2 81       	ldd	r26, Z+2	; 0x02
     e42:	b3 81       	ldd	r27, Z+3	; 0x03
     e44:	eb 81       	ldd	r30, Y+3	; 0x03
     e46:	fc 81       	ldd	r31, Y+4	; 0x04
     e48:	80 83       	st	Z, r24
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	a2 83       	std	Z+2, r26	; 0x02
     e4e:	b3 83       	std	Z+3, r27	; 0x03
}
#endif
	}
	return LOC_u8Err;
     e50:	89 81       	ldd	r24, Y+1	; 0x01
}
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <DIO_u8SetPinDirection>:
#define u8MAX_PIN_NB (u8)7
#define Null (u8)0

u8 DIO_u8SetPinDirection(DIO_tenuPORTID COPY_enuPortID,
		DIO_tenuPINID COPY_enuPinID, DIO_tenuDirection COPY_enuDirection)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <DIO_u8SetPinDirection+0x6>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <DIO_u8SetPinDirection+0x8>
     e68:	00 d0       	rcall	.+0      	; 0xe6a <DIO_u8SetPinDirection+0xa>
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	8a 83       	std	Y+2, r24	; 0x02
     e70:	6b 83       	std	Y+3, r22	; 0x03
     e72:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOC_u8Err=0;
     e74:	19 82       	std	Y+1, r1	; 0x01

	switch (COPY_enuPortID) {
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3e 83       	std	Y+6, r19	; 0x06
     e7e:	2d 83       	std	Y+5, r18	; 0x05
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <DIO_u8SetPinDirection+0x2c>
     e8a:	4f c0       	rjmp	.+158    	; 0xf2a <DIO_u8SetPinDirection+0xca>
     e8c:	2d 81       	ldd	r18, Y+5	; 0x05
     e8e:	3e 81       	ldd	r19, Y+6	; 0x06
     e90:	22 30       	cpi	r18, 0x02	; 2
     e92:	31 05       	cpc	r19, r1
     e94:	2c f4       	brge	.+10     	; 0xea0 <DIO_u8SetPinDirection+0x40>
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	71 f0       	breq	.+28     	; 0xeba <DIO_u8SetPinDirection+0x5a>
     e9e:	ed c0       	rjmp	.+474    	; 0x107a <DIO_u8SetPinDirection+0x21a>
     ea0:	2d 81       	ldd	r18, Y+5	; 0x05
     ea2:	3e 81       	ldd	r19, Y+6	; 0x06
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	09 f4       	brne	.+2      	; 0xeac <DIO_u8SetPinDirection+0x4c>
     eaa:	77 c0       	rjmp	.+238    	; 0xf9a <DIO_u8SetPinDirection+0x13a>
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	83 30       	cpi	r24, 0x03	; 3
     eb2:	91 05       	cpc	r25, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <DIO_u8SetPinDirection+0x58>
     eb6:	a9 c0       	rjmp	.+338    	; 0x100a <DIO_u8SetPinDirection+0x1aa>
     eb8:	e0 c0       	rjmp	.+448    	; 0x107a <DIO_u8SetPinDirection+0x21a>
	case DIO_enuPORTA:
		if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	88 30       	cpi	r24, 0x08	; 8
     ebe:	18 f0       	brcs	.+6      	; 0xec6 <DIO_u8SetPinDirection+0x66>
			{
				LOC_u8Err=1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	dc c0       	rjmp	.+440    	; 0x107e <DIO_u8SetPinDirection+0x21e>
			}else
			{
				if(COPY_enuDirection ==DIO_enuInput)
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	88 23       	and	r24, r24
     eca:	a9 f4       	brne	.+42     	; 0xef6 <DIO_u8SetPinDirection+0x96>
				{
					CLEAR_BIT(DDRA,COPY_enuPinID);
     ecc:	aa e3       	ldi	r26, 0x3A	; 58
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	ea e3       	ldi	r30, 0x3A	; 58
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_u8SetPinDirection+0x8a>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_u8SetPinDirection+0x86>
     eee:	80 95       	com	r24
     ef0:	84 23       	and	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	c4 c0       	rjmp	.+392    	; 0x107e <DIO_u8SetPinDirection+0x21e>
				}else if(COPY_enuDirection==DIO_enuOutput)
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	a1 f4       	brne	.+40     	; 0xf24 <DIO_u8SetPinDirection+0xc4>
				{
					SET_BIT(DDRA,COPY_enuPinID);
     efc:	aa e3       	ldi	r26, 0x3A	; 58
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e3       	ldi	r30, 0x3A	; 58
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_u8SetPinDirection+0xba>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_u8SetPinDirection+0xb6>
     f1e:	84 2b       	or	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	ad c0       	rjmp	.+346    	; 0x107e <DIO_u8SetPinDirection+0x21e>
				}else
				{
					LOC_u8Err=1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	aa c0       	rjmp	.+340    	; 0x107e <DIO_u8SetPinDirection+0x21e>
				}
			}

		break;
	case DIO_enuPORTB:
		if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	88 30       	cpi	r24, 0x08	; 8
     f2e:	18 f0       	brcs	.+6      	; 0xf36 <DIO_u8SetPinDirection+0xd6>
			{
				LOC_u8Err=1;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	a4 c0       	rjmp	.+328    	; 0x107e <DIO_u8SetPinDirection+0x21e>
			}else
			{
				if(COPY_enuDirection ==DIO_enuInput)
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	88 23       	and	r24, r24
     f3a:	a9 f4       	brne	.+42     	; 0xf66 <DIO_u8SetPinDirection+0x106>
				{
					CLEAR_BIT(DDRB,COPY_enuPinID);
     f3c:	a7 e3       	ldi	r26, 0x37	; 55
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e7 e3       	ldi	r30, 0x37	; 55
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_u8SetPinDirection+0xfa>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_u8SetPinDirection+0xf6>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	8c c0       	rjmp	.+280    	; 0x107e <DIO_u8SetPinDirection+0x21e>
				}else if(COPY_enuDirection==DIO_enuOutput)
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	a1 f4       	brne	.+40     	; 0xf94 <DIO_u8SetPinDirection+0x134>
				{
					SET_BIT(DDRB,COPY_enuPinID);
     f6c:	a7 e3       	ldi	r26, 0x37	; 55
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e7 e3       	ldi	r30, 0x37	; 55
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_u8SetPinDirection+0x12a>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_u8SetPinDirection+0x126>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	75 c0       	rjmp	.+234    	; 0x107e <DIO_u8SetPinDirection+0x21e>
				}else
				{
					LOC_u8Err=1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	72 c0       	rjmp	.+228    	; 0x107e <DIO_u8SetPinDirection+0x21e>
				}
			}

		break;
		case DIO_enuPORTC:
			if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	88 30       	cpi	r24, 0x08	; 8
     f9e:	18 f0       	brcs	.+6      	; 0xfa6 <DIO_u8SetPinDirection+0x146>
				{
					LOC_u8Err=1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	6c c0       	rjmp	.+216    	; 0x107e <DIO_u8SetPinDirection+0x21e>
				}else
				{
					if(COPY_enuDirection ==DIO_enuInput)
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	88 23       	and	r24, r24
     faa:	a9 f4       	brne	.+42     	; 0xfd6 <DIO_u8SetPinDirection+0x176>
					{
						CLEAR_BIT(DDRC,COPY_enuPinID);
     fac:	a4 e3       	ldi	r26, 0x34	; 52
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e4 e3       	ldi	r30, 0x34	; 52
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_u8SetPinDirection+0x16a>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_u8SetPinDirection+0x166>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	54 c0       	rjmp	.+168    	; 0x107e <DIO_u8SetPinDirection+0x21e>
					}else if(COPY_enuDirection==DIO_enuOutput)
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	a1 f4       	brne	.+40     	; 0x1004 <DIO_u8SetPinDirection+0x1a4>
					{
						SET_BIT(DDRC,COPY_enuPinID);
     fdc:	a4 e3       	ldi	r26, 0x34	; 52
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 e3       	ldi	r30, 0x34	; 52
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_u8SetPinDirection+0x19a>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_u8SetPinDirection+0x196>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	3d c0       	rjmp	.+122    	; 0x107e <DIO_u8SetPinDirection+0x21e>
					}else
					{
						LOC_u8Err=1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	3a c0       	rjmp	.+116    	; 0x107e <DIO_u8SetPinDirection+0x21e>
					}
				}

			break;
		case DIO_enuPORTD:
			if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	88 30       	cpi	r24, 0x08	; 8
    100e:	18 f0       	brcs	.+6      	; 0x1016 <DIO_u8SetPinDirection+0x1b6>
				{
					LOC_u8Err=1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	34 c0       	rjmp	.+104    	; 0x107e <DIO_u8SetPinDirection+0x21e>
				}else
				{
					if(COPY_enuDirection ==DIO_enuInput)
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	88 23       	and	r24, r24
    101a:	a9 f4       	brne	.+42     	; 0x1046 <DIO_u8SetPinDirection+0x1e6>
					{
						CLEAR_BIT(DDRD,COPY_enuPinID);
    101c:	a1 e3       	ldi	r26, 0x31	; 49
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e1 e3       	ldi	r30, 0x31	; 49
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_u8SetPinDirection+0x1da>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_u8SetPinDirection+0x1d6>
    103e:	80 95       	com	r24
    1040:	84 23       	and	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	1c c0       	rjmp	.+56     	; 0x107e <DIO_u8SetPinDirection+0x21e>
					}else if(COPY_enuDirection==DIO_enuOutput)
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	a1 f4       	brne	.+40     	; 0x1074 <DIO_u8SetPinDirection+0x214>
					{
						SET_BIT(DDRD,COPY_enuPinID);
    104c:	a1 e3       	ldi	r26, 0x31	; 49
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e1 e3       	ldi	r30, 0x31	; 49
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8SetPinDirection+0x20a>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8SetPinDirection+0x206>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	05 c0       	rjmp	.+10     	; 0x107e <DIO_u8SetPinDirection+0x21e>
					}else
					{
						LOC_u8Err=1;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_u8SetPinDirection+0x21e>
					}
				}

			break;
		default:
			LOC_u8Err=1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	return LOC_u8Err;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1080:	26 96       	adiw	r28, 0x06	; 6
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <DIO_u8SetPinValue>:
 * OUTPUT : ERROT STATE
 */

u8 DIO_u8SetPinValue(DIO_tenuPORTID COPY_enuPortID,
		DIO_tenuPINID COPY_enuPinID,DIO_tenuValue COPY_enuValue)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <DIO_u8SetPinValue+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <DIO_u8SetPinValue+0x8>
    109a:	00 d0       	rcall	.+0      	; 0x109c <DIO_u8SetPinValue+0xa>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	6b 83       	std	Y+3, r22	; 0x03
    10a4:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOC_u8Err=0;
    10a6:	19 82       	std	Y+1, r1	; 0x01
	switch (COPY_enuPortID) {
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3e 83       	std	Y+6, r19	; 0x06
    10b0:	2d 83       	std	Y+5, r18	; 0x05
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <DIO_u8SetPinValue+0x2c>
    10bc:	4f c0       	rjmp	.+158    	; 0x115c <DIO_u8SetPinValue+0xca>
    10be:	2d 81       	ldd	r18, Y+5	; 0x05
    10c0:	3e 81       	ldd	r19, Y+6	; 0x06
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	2c f4       	brge	.+10     	; 0x10d2 <DIO_u8SetPinValue+0x40>
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	9e 81       	ldd	r25, Y+6	; 0x06
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	71 f0       	breq	.+28     	; 0x10ec <DIO_u8SetPinValue+0x5a>
    10d0:	ed c0       	rjmp	.+474    	; 0x12ac <DIO_u8SetPinValue+0x21a>
    10d2:	2d 81       	ldd	r18, Y+5	; 0x05
    10d4:	3e 81       	ldd	r19, Y+6	; 0x06
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <DIO_u8SetPinValue+0x4c>
    10dc:	77 c0       	rjmp	.+238    	; 0x11cc <DIO_u8SetPinValue+0x13a>
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	91 05       	cpc	r25, r1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <DIO_u8SetPinValue+0x58>
    10e8:	a9 c0       	rjmp	.+338    	; 0x123c <DIO_u8SetPinValue+0x1aa>
    10ea:	e0 c0       	rjmp	.+448    	; 0x12ac <DIO_u8SetPinValue+0x21a>
		case DIO_enuPORTA:
			if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	88 30       	cpi	r24, 0x08	; 8
    10f0:	18 f0       	brcs	.+6      	; 0x10f8 <DIO_u8SetPinValue+0x66>
			{
				LOC_u8Err=1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	dc c0       	rjmp	.+440    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
			}else
			{
				if(COPY_enuValue==DIO_enuHigh)
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	a1 f4       	brne	.+40     	; 0x1126 <DIO_u8SetPinValue+0x94>
				{
					SET_BIT(PORTA,COPY_enuPinID);
    10fe:	ab e3       	ldi	r26, 0x3B	; 59
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	eb e3       	ldi	r30, 0x3B	; 59
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_u8SetPinValue+0x8a>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_u8SetPinValue+0x86>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	c5 c0       	rjmp	.+394    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}else if (COPY_enuValue==DIO_enuLow)
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	88 23       	and	r24, r24
    112a:	a9 f4       	brne	.+42     	; 0x1156 <DIO_u8SetPinValue+0xc4>
				{
					CLEAR_BIT(PORTA,COPY_enuPinID);
    112c:	ab e3       	ldi	r26, 0x3B	; 59
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	eb e3       	ldi	r30, 0x3B	; 59
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_u8SetPinValue+0xb8>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_u8SetPinValue+0xb4>
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	ad c0       	rjmp	.+346    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}
				else
				{
					LOC_u8Err=1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	aa c0       	rjmp	.+340    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}
			}
			break;
		case DIO_enuPORTB:
			if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 30       	cpi	r24, 0x08	; 8
    1160:	18 f0       	brcs	.+6      	; 0x1168 <DIO_u8SetPinValue+0xd6>
			{
				LOC_u8Err=1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	a4 c0       	rjmp	.+328    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
			}else
			{
				if(COPY_enuValue==DIO_enuHigh)
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	a1 f4       	brne	.+40     	; 0x1196 <DIO_u8SetPinValue+0x104>
				{
					SET_BIT(PORTB,COPY_enuPinID);
    116e:	a8 e3       	ldi	r26, 0x38	; 56
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e8 e3       	ldi	r30, 0x38	; 56
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_u8SetPinValue+0xfa>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_u8SetPinValue+0xf6>
    1190:	84 2b       	or	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	8d c0       	rjmp	.+282    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}else if (COPY_enuValue==DIO_enuLow)
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	88 23       	and	r24, r24
    119a:	a9 f4       	brne	.+42     	; 0x11c6 <DIO_u8SetPinValue+0x134>
				{
					CLEAR_BIT(PORTB,COPY_enuPinID);
    119c:	a8 e3       	ldi	r26, 0x38	; 56
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e8 e3       	ldi	r30, 0x38	; 56
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8SetPinValue+0x128>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_u8SetPinValue+0x124>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	75 c0       	rjmp	.+234    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}
				else
				{
					LOC_u8Err=1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	72 c0       	rjmp	.+228    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}
			}
			break;
		case DIO_enuPORTC:
			if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	88 30       	cpi	r24, 0x08	; 8
    11d0:	18 f0       	brcs	.+6      	; 0x11d8 <DIO_u8SetPinValue+0x146>
			{
				LOC_u8Err=1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	6c c0       	rjmp	.+216    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
			}else
			{
				if(COPY_enuValue==DIO_enuHigh)
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	a1 f4       	brne	.+40     	; 0x1206 <DIO_u8SetPinValue+0x174>
				{
					SET_BIT(PORTC,COPY_enuPinID);
    11de:	a5 e3       	ldi	r26, 0x35	; 53
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_u8SetPinValue+0x16a>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_u8SetPinValue+0x166>
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	55 c0       	rjmp	.+170    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}else if (COPY_enuValue==DIO_enuLow)
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	88 23       	and	r24, r24
    120a:	a9 f4       	brne	.+42     	; 0x1236 <DIO_u8SetPinValue+0x1a4>
				{
					CLEAR_BIT(PORTC,COPY_enuPinID);
    120c:	a5 e3       	ldi	r26, 0x35	; 53
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e5 e3       	ldi	r30, 0x35	; 53
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_u8SetPinValue+0x198>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_u8SetPinValue+0x194>
    122e:	80 95       	com	r24
    1230:	84 23       	and	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	3d c0       	rjmp	.+122    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}
				else
				{
					LOC_u8Err=1;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	3a c0       	rjmp	.+116    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}
			}
			break;
		case DIO_enuPORTD:
			if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	18 f0       	brcs	.+6      	; 0x1248 <DIO_u8SetPinValue+0x1b6>
			{
				LOC_u8Err=1;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	34 c0       	rjmp	.+104    	; 0x12b0 <DIO_u8SetPinValue+0x21e>
			}else
			{
				if(COPY_enuValue==DIO_enuHigh)
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	a1 f4       	brne	.+40     	; 0x1276 <DIO_u8SetPinValue+0x1e4>
				{
					SET_BIT(PORTD,COPY_enuPinID);
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_u8SetPinValue+0x1da>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_u8SetPinValue+0x1d6>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	1d c0       	rjmp	.+58     	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}else if (COPY_enuValue==DIO_enuLow)
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	88 23       	and	r24, r24
    127a:	a9 f4       	brne	.+42     	; 0x12a6 <DIO_u8SetPinValue+0x214>
				{
					CLEAR_BIT(PORTD,COPY_enuPinID);
    127c:	a2 e3       	ldi	r26, 0x32	; 50
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e2 e3       	ldi	r30, 0x32	; 50
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8SetPinValue+0x208>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_u8SetPinValue+0x204>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}
				else
				{
					LOC_u8Err=1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_u8SetPinValue+0x21e>
				}
			}
			break;
		default:
			LOC_u8Err=1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return LOC_u8Err;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
	}
    12b2:	26 96       	adiw	r28, 0x06	; 6
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <DIO_u8GetPinValue>:
 * OUTPUT : ERROR STATE
 */

u8 DIO_u8GetPinValue(DIO_tenuPORTID COPY_enuPortID,
		DIO_tenuPINID COPY_enuPinID,DIO_tenuValue* COPY_penuPinValue)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	27 97       	sbiw	r28, 0x07	; 7
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	8a 83       	std	Y+2, r24	; 0x02
    12da:	6b 83       	std	Y+3, r22	; 0x03
    12dc:	5d 83       	std	Y+5, r21	; 0x05
    12de:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOC_u8Err=0;
    12e0:	19 82       	std	Y+1, r1	; 0x01
	if(COPY_penuPinValue==Null)
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	9d 81       	ldd	r25, Y+5	; 0x05
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <DIO_u8GetPinValue+0x2c>
	{
		LOC_u8Err=1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	8b c0       	rjmp	.+278    	; 0x1406 <DIO_u8GetPinValue+0x142>
	}else
	{
		switch (COPY_enuPortID) {
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3f 83       	std	Y+7, r19	; 0x07
    12f8:	2e 83       	std	Y+6, r18	; 0x06
    12fa:	4e 81       	ldd	r20, Y+6	; 0x06
    12fc:	5f 81       	ldd	r21, Y+7	; 0x07
    12fe:	41 30       	cpi	r20, 0x01	; 1
    1300:	51 05       	cpc	r21, r1
    1302:	89 f1       	breq	.+98     	; 0x1366 <DIO_u8GetPinValue+0xa2>
    1304:	8e 81       	ldd	r24, Y+6	; 0x06
    1306:	9f 81       	ldd	r25, Y+7	; 0x07
    1308:	82 30       	cpi	r24, 0x02	; 2
    130a:	91 05       	cpc	r25, r1
    130c:	34 f4       	brge	.+12     	; 0x131a <DIO_u8GetPinValue+0x56>
    130e:	2e 81       	ldd	r18, Y+6	; 0x06
    1310:	3f 81       	ldd	r19, Y+7	; 0x07
    1312:	21 15       	cp	r18, r1
    1314:	31 05       	cpc	r19, r1
    1316:	69 f0       	breq	.+26     	; 0x1332 <DIO_u8GetPinValue+0x6e>
    1318:	74 c0       	rjmp	.+232    	; 0x1402 <DIO_u8GetPinValue+0x13e>
    131a:	4e 81       	ldd	r20, Y+6	; 0x06
    131c:	5f 81       	ldd	r21, Y+7	; 0x07
    131e:	42 30       	cpi	r20, 0x02	; 2
    1320:	51 05       	cpc	r21, r1
    1322:	d9 f1       	breq	.+118    	; 0x139a <DIO_u8GetPinValue+0xd6>
    1324:	8e 81       	ldd	r24, Y+6	; 0x06
    1326:	9f 81       	ldd	r25, Y+7	; 0x07
    1328:	83 30       	cpi	r24, 0x03	; 3
    132a:	91 05       	cpc	r25, r1
    132c:	09 f4       	brne	.+2      	; 0x1330 <DIO_u8GetPinValue+0x6c>
    132e:	4f c0       	rjmp	.+158    	; 0x13ce <DIO_u8GetPinValue+0x10a>
    1330:	68 c0       	rjmp	.+208    	; 0x1402 <DIO_u8GetPinValue+0x13e>
			case DIO_enuPORTA:
				if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	88 30       	cpi	r24, 0x08	; 8
    1336:	18 f0       	brcs	.+6      	; 0x133e <DIO_u8GetPinValue+0x7a>
				{
					LOC_u8Err=1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	64 c0       	rjmp	.+200    	; 0x1406 <DIO_u8GetPinValue+0x142>
				}else
				{
					*COPY_penuPinValue=GET_BIT(PINA,COPY_enuPinID);
    133e:	e9 e3       	ldi	r30, 0x39	; 57
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a9 01       	movw	r20, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_u8GetPinValue+0x92>
    1352:	55 95       	asr	r21
    1354:	47 95       	ror	r20
    1356:	8a 95       	dec	r24
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_u8GetPinValue+0x8e>
    135a:	ca 01       	movw	r24, r20
    135c:	81 70       	andi	r24, 0x01	; 1
    135e:	ec 81       	ldd	r30, Y+4	; 0x04
    1360:	fd 81       	ldd	r31, Y+5	; 0x05
    1362:	80 83       	st	Z, r24
    1364:	50 c0       	rjmp	.+160    	; 0x1406 <DIO_u8GetPinValue+0x142>
				}
				break;
			case DIO_enuPORTB:
				if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	88 30       	cpi	r24, 0x08	; 8
    136a:	18 f0       	brcs	.+6      	; 0x1372 <DIO_u8GetPinValue+0xae>
				{
					LOC_u8Err=1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	4a c0       	rjmp	.+148    	; 0x1406 <DIO_u8GetPinValue+0x142>
				}else
				{
					*COPY_penuPinValue=GET_BIT(PINB,COPY_enuPinID);
    1372:	e6 e3       	ldi	r30, 0x36	; 54
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a9 01       	movw	r20, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_u8GetPinValue+0xc6>
    1386:	55 95       	asr	r21
    1388:	47 95       	ror	r20
    138a:	8a 95       	dec	r24
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_u8GetPinValue+0xc2>
    138e:	ca 01       	movw	r24, r20
    1390:	81 70       	andi	r24, 0x01	; 1
    1392:	ec 81       	ldd	r30, Y+4	; 0x04
    1394:	fd 81       	ldd	r31, Y+5	; 0x05
    1396:	80 83       	st	Z, r24
    1398:	36 c0       	rjmp	.+108    	; 0x1406 <DIO_u8GetPinValue+0x142>
				}
				break;
			case DIO_enuPORTC:
				if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 30       	cpi	r24, 0x08	; 8
    139e:	18 f0       	brcs	.+6      	; 0x13a6 <DIO_u8GetPinValue+0xe2>
				{
					LOC_u8Err=1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	30 c0       	rjmp	.+96     	; 0x1406 <DIO_u8GetPinValue+0x142>
				}else
				{
					*COPY_penuPinValue=GET_BIT(PINC,COPY_enuPinID);
    13a6:	e3 e3       	ldi	r30, 0x33	; 51
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a9 01       	movw	r20, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_u8GetPinValue+0xfa>
    13ba:	55 95       	asr	r21
    13bc:	47 95       	ror	r20
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_u8GetPinValue+0xf6>
    13c2:	ca 01       	movw	r24, r20
    13c4:	81 70       	andi	r24, 0x01	; 1
    13c6:	ec 81       	ldd	r30, Y+4	; 0x04
    13c8:	fd 81       	ldd	r31, Y+5	; 0x05
    13ca:	80 83       	st	Z, r24
    13cc:	1c c0       	rjmp	.+56     	; 0x1406 <DIO_u8GetPinValue+0x142>
				}
				break;
			case DIO_enuPORTD:
				if(COPY_enuPinID>u8MAX_PIN_NB || COPY_enuPinID<0)
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 30       	cpi	r24, 0x08	; 8
    13d2:	18 f0       	brcs	.+6      	; 0x13da <DIO_u8GetPinValue+0x116>
				{
					LOC_u8Err=1;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	16 c0       	rjmp	.+44     	; 0x1406 <DIO_u8GetPinValue+0x142>
				}else
				{
					*COPY_penuPinValue=GET_BIT(PIND,COPY_enuPinID);
    13da:	e0 e3       	ldi	r30, 0x30	; 48
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a9 01       	movw	r20, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_u8GetPinValue+0x12e>
    13ee:	55 95       	asr	r21
    13f0:	47 95       	ror	r20
    13f2:	8a 95       	dec	r24
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_u8GetPinValue+0x12a>
    13f6:	ca 01       	movw	r24, r20
    13f8:	81 70       	andi	r24, 0x01	; 1
    13fa:	ec 81       	ldd	r30, Y+4	; 0x04
    13fc:	fd 81       	ldd	r31, Y+5	; 0x05
    13fe:	80 83       	st	Z, r24
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_u8GetPinValue+0x142>
				}
				break;
			default:
				LOC_u8Err=1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}


	return LOC_u8Err;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
}
    1408:	27 96       	adiw	r28, 0x07	; 7
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <DIO_u8SetPortDirection>:
 * DIRECTION
 * OUTPUT: ERROR STATE
 *
 */
u8 DIO_u8SetPortDirection(DIO_tenuPORTID COPY_enuPortID,u8 COPY_enuDirection)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <DIO_u8SetPortDirection+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_u8SetPortDirection+0x8>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8Err=0;
    142c:	19 82       	std	Y+1, r1	; 0x01
	switch (COPY_enuPortID) {
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3d 83       	std	Y+5, r19	; 0x05
    1436:	2c 83       	std	Y+4, r18	; 0x04
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	d1 f0       	breq	.+52     	; 0x1476 <DIO_u8SetPortDirection+0x5c>
    1442:	2c 81       	ldd	r18, Y+4	; 0x04
    1444:	3d 81       	ldd	r19, Y+5	; 0x05
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	2c f4       	brge	.+10     	; 0x1456 <DIO_u8SetPortDirection+0x3c>
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	9d 81       	ldd	r25, Y+5	; 0x05
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	61 f0       	breq	.+24     	; 0x146c <DIO_u8SetPortDirection+0x52>
    1454:	1f c0       	rjmp	.+62     	; 0x1494 <DIO_u8SetPortDirection+0x7a>
    1456:	2c 81       	ldd	r18, Y+4	; 0x04
    1458:	3d 81       	ldd	r19, Y+5	; 0x05
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	81 f0       	breq	.+32     	; 0x1480 <DIO_u8SetPortDirection+0x66>
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	91 05       	cpc	r25, r1
    1468:	81 f0       	breq	.+32     	; 0x148a <DIO_u8SetPortDirection+0x70>
    146a:	14 c0       	rjmp	.+40     	; 0x1494 <DIO_u8SetPortDirection+0x7a>
		case DIO_enuPORTA:
			DDRA=COPY_enuDirection;
    146c:	ea e3       	ldi	r30, 0x3A	; 58
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	80 83       	st	Z, r24
    1474:	11 c0       	rjmp	.+34     	; 0x1498 <DIO_u8SetPortDirection+0x7e>
			break;
		case DIO_enuPORTB:
			DDRB=COPY_enuDirection;
    1476:	e7 e3       	ldi	r30, 0x37	; 55
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	80 83       	st	Z, r24
    147e:	0c c0       	rjmp	.+24     	; 0x1498 <DIO_u8SetPortDirection+0x7e>
			break;
		case DIO_enuPORTC:
			DDRC=COPY_enuDirection;
    1480:	e4 e3       	ldi	r30, 0x34	; 52
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	80 83       	st	Z, r24
    1488:	07 c0       	rjmp	.+14     	; 0x1498 <DIO_u8SetPortDirection+0x7e>
			break;
		case DIO_enuPORTD:
			DDRD=COPY_enuDirection;
    148a:	e1 e3       	ldi	r30, 0x31	; 49
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	80 83       	st	Z, r24
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_u8SetPortDirection+0x7e>
			break;
		default:
			LOC_u8Err=1;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return LOC_u8Err;
    1498:	89 81       	ldd	r24, Y+1	; 0x01
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <DIO_u8SetPortValue>:
 *
 *
 */

u8 DIO_u8SetPortValue(DIO_tenuPORTID COPY_enuPortID,u8 COPY_u8Value)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <DIO_u8SetPortValue+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <DIO_u8SetPortValue+0x8>
    14b2:	0f 92       	push	r0
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8Err=0;
    14bc:	19 82       	std	Y+1, r1	; 0x01
	switch (COPY_enuPortID) {
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	3d 83       	std	Y+5, r19	; 0x05
    14c6:	2c 83       	std	Y+4, r18	; 0x04
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	d1 f0       	breq	.+52     	; 0x1506 <DIO_u8SetPortValue+0x5c>
    14d2:	2c 81       	ldd	r18, Y+4	; 0x04
    14d4:	3d 81       	ldd	r19, Y+5	; 0x05
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	2c f4       	brge	.+10     	; 0x14e6 <DIO_u8SetPortValue+0x3c>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	61 f0       	breq	.+24     	; 0x14fc <DIO_u8SetPortValue+0x52>
    14e4:	1f c0       	rjmp	.+62     	; 0x1524 <DIO_u8SetPortValue+0x7a>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	81 f0       	breq	.+32     	; 0x1510 <DIO_u8SetPortValue+0x66>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	91 05       	cpc	r25, r1
    14f8:	81 f0       	breq	.+32     	; 0x151a <DIO_u8SetPortValue+0x70>
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <DIO_u8SetPortValue+0x7a>
		case DIO_enuPORTA:
			PORTA=COPY_u8Value;
    14fc:	eb e3       	ldi	r30, 0x3B	; 59
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	80 83       	st	Z, r24
    1504:	11 c0       	rjmp	.+34     	; 0x1528 <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_enuPORTB:
			PORTB=COPY_u8Value;
    1506:	e8 e3       	ldi	r30, 0x38	; 56
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	80 83       	st	Z, r24
    150e:	0c c0       	rjmp	.+24     	; 0x1528 <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_enuPORTC:
			PORTC=COPY_u8Value;
    1510:	e5 e3       	ldi	r30, 0x35	; 53
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	80 83       	st	Z, r24
    1518:	07 c0       	rjmp	.+14     	; 0x1528 <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_enuPORTD:
			PORTD=COPY_u8Value;
    151a:	e2 e3       	ldi	r30, 0x32	; 50
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	80 83       	st	Z, r24
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_u8SetPortValue+0x7e>
			break;
		default:
			LOC_u8Err=1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return LOC_u8Err;
    1528:	89 81       	ldd	r24, Y+1	; 0x01
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <DIO_u8GetPortValue>:
 *	POINTER TO PORT VALUE
 * 	OUTPUT: ERROR STATE
 *
 */
u8 DIO_u8GetPortValue(DIO_tenuPORTID COPY_enuPortID,DIO_tenuValue* COPY_penuPortValue)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <DIO_u8GetPortValue+0x6>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <DIO_u8GetPortValue+0x8>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <DIO_u8GetPortValue+0xa>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	8a 83       	std	Y+2, r24	; 0x02
    154a:	7c 83       	std	Y+4, r23	; 0x04
    154c:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8Err=0;
    154e:	19 82       	std	Y+1, r1	; 0x01

	switch (COPY_enuPortID) {
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	3e 83       	std	Y+6, r19	; 0x06
    1558:	2d 83       	std	Y+5, r18	; 0x05
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	91 05       	cpc	r25, r1
    1562:	19 f1       	breq	.+70     	; 0x15aa <DIO_u8GetPortValue+0x70>
    1564:	2d 81       	ldd	r18, Y+5	; 0x05
    1566:	3e 81       	ldd	r19, Y+6	; 0x06
    1568:	22 30       	cpi	r18, 0x02	; 2
    156a:	31 05       	cpc	r19, r1
    156c:	2c f4       	brge	.+10     	; 0x1578 <DIO_u8GetPortValue+0x3e>
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	61 f0       	breq	.+24     	; 0x158e <DIO_u8GetPortValue+0x54>
    1576:	43 c0       	rjmp	.+134    	; 0x15fe <DIO_u8GetPortValue+0xc4>
    1578:	2d 81       	ldd	r18, Y+5	; 0x05
    157a:	3e 81       	ldd	r19, Y+6	; 0x06
    157c:	22 30       	cpi	r18, 0x02	; 2
    157e:	31 05       	cpc	r19, r1
    1580:	11 f1       	breq	.+68     	; 0x15c6 <DIO_u8GetPortValue+0x8c>
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	91 05       	cpc	r25, r1
    158a:	59 f1       	breq	.+86     	; 0x15e2 <DIO_u8GetPortValue+0xa8>
    158c:	38 c0       	rjmp	.+112    	; 0x15fe <DIO_u8GetPortValue+0xc4>
		case DIO_enuPORTA:
			if(COPY_penuPortValue==Null)
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	19 f4       	brne	.+6      	; 0x159c <DIO_u8GetPortValue+0x62>
			{
				LOC_u8Err=1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	33 c0       	rjmp	.+102    	; 0x1602 <DIO_u8GetPortValue+0xc8>
			}else
			{
				*COPY_penuPortValue=PINA;
    159c:	e9 e3       	ldi	r30, 0x39	; 57
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	eb 81       	ldd	r30, Y+3	; 0x03
    15a4:	fc 81       	ldd	r31, Y+4	; 0x04
    15a6:	80 83       	st	Z, r24
    15a8:	2c c0       	rjmp	.+88     	; 0x1602 <DIO_u8GetPortValue+0xc8>
			}
			break;
		case DIO_enuPORTB:
			if(COPY_penuPortValue==Null)
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	19 f4       	brne	.+6      	; 0x15b8 <DIO_u8GetPortValue+0x7e>
			{
				LOC_u8Err=1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	25 c0       	rjmp	.+74     	; 0x1602 <DIO_u8GetPortValue+0xc8>
			}else
			{
				*COPY_penuPortValue=PINB;
    15b8:	e6 e3       	ldi	r30, 0x36	; 54
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	eb 81       	ldd	r30, Y+3	; 0x03
    15c0:	fc 81       	ldd	r31, Y+4	; 0x04
    15c2:	80 83       	st	Z, r24
    15c4:	1e c0       	rjmp	.+60     	; 0x1602 <DIO_u8GetPortValue+0xc8>
			}
			break;
		case DIO_enuPORTC:
			if(COPY_penuPortValue==Null)
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	19 f4       	brne	.+6      	; 0x15d4 <DIO_u8GetPortValue+0x9a>
			{
				LOC_u8Err=1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	17 c0       	rjmp	.+46     	; 0x1602 <DIO_u8GetPortValue+0xc8>
			}else
			{
				*COPY_penuPortValue=PINC;
    15d4:	e3 e3       	ldi	r30, 0x33	; 51
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	eb 81       	ldd	r30, Y+3	; 0x03
    15dc:	fc 81       	ldd	r31, Y+4	; 0x04
    15de:	80 83       	st	Z, r24
    15e0:	10 c0       	rjmp	.+32     	; 0x1602 <DIO_u8GetPortValue+0xc8>
			}
			break;
		case DIO_enuPORTD:
			if(COPY_penuPortValue==Null)
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	19 f4       	brne	.+6      	; 0x15f0 <DIO_u8GetPortValue+0xb6>
			{
				LOC_u8Err=1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	09 c0       	rjmp	.+18     	; 0x1602 <DIO_u8GetPortValue+0xc8>
			}else
			{
				*COPY_penuPortValue=PIND;
    15f0:	e0 e3       	ldi	r30, 0x30	; 48
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	eb 81       	ldd	r30, Y+3	; 0x03
    15f8:	fc 81       	ldd	r31, Y+4	; 0x04
    15fa:	80 83       	st	Z, r24
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_u8GetPortValue+0xc8>
			}
			break;
		default:
			LOC_u8Err=1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	89 83       	std	Y+1, r24	; 0x01
			break;
	}



	return LOC_u8Err;
    1602:	89 81       	ldd	r24, Y+1	; 0x01
}
    1604:	26 96       	adiw	r28, 0x06	; 6
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <__vector_3>:

/* ISR of INT1 + Telling compiler not to remove it at linking time as it is not called by SW */
void __vector_3(void) __attribute__((signal,used));

void __vector_3(void)
{
    1616:	1f 92       	push	r1
    1618:	0f 92       	push	r0
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	0f 92       	push	r0
    161e:	11 24       	eor	r1, r1
    1620:	2f 93       	push	r18
    1622:	3f 93       	push	r19
    1624:	4f 93       	push	r20
    1626:	5f 93       	push	r21
    1628:	6f 93       	push	r22
    162a:	7f 93       	push	r23
    162c:	8f 93       	push	r24
    162e:	9f 93       	push	r25
    1630:	af 93       	push	r26
    1632:	bf 93       	push	r27
    1634:	ef 93       	push	r30
    1636:	ff 93       	push	r31
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	e8 97       	sbiw	r28, 0x38	; 56
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	cd bf       	out	0x3d, r28	; 61
	if(IntpCase==SHOME_START_STATE)
    1646:	80 91 ad 00 	lds	r24, 0x00AD
    164a:	90 91 ae 00 	lds	r25, 0x00AE
    164e:	83 30       	cpi	r24, 0x03	; 3
    1650:	91 05       	cpc	r25, r1
    1652:	31 f4       	brne	.+12     	; 0x1660 <__vector_3+0x4a>
	{
		IntpCase=SHOME_FIRST_STATE;
    1654:	84 e0       	ldi	r24, 0x04	; 4
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	90 93 ae 00 	sts	0x00AE, r25
    165c:	80 93 ad 00 	sts	0x00AD, r24
	}
	if(IntpCase==SHOME_FIRST_STATE)
    1660:	80 91 ad 00 	lds	r24, 0x00AD
    1664:	90 91 ae 00 	lds	r25, 0x00AE
    1668:	84 30       	cpi	r24, 0x04	; 4
    166a:	91 05       	cpc	r25, r1
    166c:	09 f0       	breq	.+2      	; 0x1670 <__vector_3+0x5a>
    166e:	8e c0       	rjmp	.+284    	; 0x178c <__vector_3+0x176>
		{
			DIO_u8SetPinValue(DIO_enuPORTA,DIO_enuPIN2,DIO_enuHigh);
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	62 e0       	ldi	r22, 0x02	; 2
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
			LCD_vidWriteCommand(LCD_u8CLEAR_DISPLAY);
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>
			LCD_vidWriteString("WELCOME");
    1680:	80 e6       	ldi	r24, 0x60	; 96
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_vidWriteString>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e8       	ldi	r25, 0x80	; 128
    168c:	ab e3       	ldi	r26, 0x3B	; 59
    168e:	b5 e4       	ldi	r27, 0x45	; 69
    1690:	8d ab       	std	Y+53, r24	; 0x35
    1692:	9e ab       	std	Y+54, r25	; 0x36
    1694:	af ab       	std	Y+55, r26	; 0x37
    1696:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1698:	6d a9       	ldd	r22, Y+53	; 0x35
    169a:	7e a9       	ldd	r23, Y+54	; 0x36
    169c:	8f a9       	ldd	r24, Y+55	; 0x37
    169e:	98 ad       	ldd	r25, Y+56	; 0x38
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4a ef       	ldi	r20, 0xFA	; 250
    16a6:	54 e4       	ldi	r21, 0x44	; 68
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	89 ab       	std	Y+49, r24	; 0x31
    16b2:	9a ab       	std	Y+50, r25	; 0x32
    16b4:	ab ab       	std	Y+51, r26	; 0x33
    16b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16b8:	69 a9       	ldd	r22, Y+49	; 0x31
    16ba:	7a a9       	ldd	r23, Y+50	; 0x32
    16bc:	8b a9       	ldd	r24, Y+51	; 0x33
    16be:	9c a9       	ldd	r25, Y+52	; 0x34
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16cc:	88 23       	and	r24, r24
    16ce:	2c f4       	brge	.+10     	; 0x16da <__vector_3+0xc4>
		__ticks = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	98 ab       	std	Y+48, r25	; 0x30
    16d6:	8f a7       	std	Y+47, r24	; 0x2f
    16d8:	3f c0       	rjmp	.+126    	; 0x1758 <__vector_3+0x142>
	else if (__tmp > 65535)
    16da:	69 a9       	ldd	r22, Y+49	; 0x31
    16dc:	7a a9       	ldd	r23, Y+50	; 0x32
    16de:	8b a9       	ldd	r24, Y+51	; 0x33
    16e0:	9c a9       	ldd	r25, Y+52	; 0x34
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	57 e4       	ldi	r21, 0x47	; 71
    16ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	4c f5       	brge	.+82     	; 0x1744 <__vector_3+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	6d a9       	ldd	r22, Y+53	; 0x35
    16f4:	7e a9       	ldd	r23, Y+54	; 0x36
    16f6:	8f a9       	ldd	r24, Y+55	; 0x37
    16f8:	98 ad       	ldd	r25, Y+56	; 0x38
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	98 ab       	std	Y+48, r25	; 0x30
    1718:	8f a7       	std	Y+47, r24	; 0x2f
    171a:	0f c0       	rjmp	.+30     	; 0x173a <__vector_3+0x124>
    171c:	88 ec       	ldi	r24, 0xC8	; 200
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9e a7       	std	Y+46, r25	; 0x2e
    1722:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1724:	8d a5       	ldd	r24, Y+45	; 0x2d
    1726:	9e a5       	ldd	r25, Y+46	; 0x2e
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <__vector_3+0x112>
    172c:	9e a7       	std	Y+46, r25	; 0x2e
    172e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	8f a5       	ldd	r24, Y+47	; 0x2f
    1732:	98 a9       	ldd	r25, Y+48	; 0x30
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	98 ab       	std	Y+48, r25	; 0x30
    1738:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	8f a5       	ldd	r24, Y+47	; 0x2f
    173c:	98 a9       	ldd	r25, Y+48	; 0x30
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	69 f7       	brne	.-38     	; 0x171c <__vector_3+0x106>
    1742:	14 c0       	rjmp	.+40     	; 0x176c <__vector_3+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1744:	69 a9       	ldd	r22, Y+49	; 0x31
    1746:	7a a9       	ldd	r23, Y+50	; 0x32
    1748:	8b a9       	ldd	r24, Y+51	; 0x33
    174a:	9c a9       	ldd	r25, Y+52	; 0x34
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	98 ab       	std	Y+48, r25	; 0x30
    1756:	8f a7       	std	Y+47, r24	; 0x2f
    1758:	8f a5       	ldd	r24, Y+47	; 0x2f
    175a:	98 a9       	ldd	r25, Y+48	; 0x30
    175c:	9c a7       	std	Y+44, r25	; 0x2c
    175e:	8b a7       	std	Y+43, r24	; 0x2b
    1760:	8b a5       	ldd	r24, Y+43	; 0x2b
    1762:	9c a5       	ldd	r25, Y+44	; 0x2c
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <__vector_3+0x14e>
    1768:	9c a7       	std	Y+44, r25	; 0x2c
    176a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(3000);
			LCD_vidWriteCommand(LCD_u8CLEAR_DISPLAY);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>
			LCD_vidWriteString("Enter PW");
    1772:	88 e6       	ldi	r24, 0x68	; 104
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_vidWriteString>
			INTP_vidIntp2Disable();
    177a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <INTP_vidIntp2Disable>
			FLAG=1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	90 93 d2 00 	sts	0x00D2, r25
    1786:	80 93 d1 00 	sts	0x00D1, r24
    178a:	88 c1       	rjmp	.+784    	; 0x1a9c <__vector_3+0x486>
		}
	else if(IntpCase==SHOME_OFF_STATE)
    178c:	80 91 ad 00 	lds	r24, 0x00AD
    1790:	90 91 ae 00 	lds	r25, 0x00AE
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	91 05       	cpc	r25, r1
    1798:	09 f0       	breq	.+2      	; 0x179c <__vector_3+0x186>
    179a:	80 c1       	rjmp	.+768    	; 0x1a9c <__vector_3+0x486>
	{
		LCD_vidWriteCommand(LCD_u8CLEAR_DISPLAY);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>
		LCD_vidWriteString("closing in 3");
    17a2:	81 e7       	ldi	r24, 0x71	; 113
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_vidWriteString>
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	aa e7       	ldi	r26, 0x7A	; 122
    17b0:	b4 e4       	ldi	r27, 0x44	; 68
    17b2:	8f a3       	std	Y+39, r24	; 0x27
    17b4:	98 a7       	std	Y+40, r25	; 0x28
    17b6:	a9 a7       	std	Y+41, r26	; 0x29
    17b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ba:	6f a1       	ldd	r22, Y+39	; 0x27
    17bc:	78 a5       	ldd	r23, Y+40	; 0x28
    17be:	89 a5       	ldd	r24, Y+41	; 0x29
    17c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	4a ef       	ldi	r20, 0xFA	; 250
    17c8:	54 e4       	ldi	r21, 0x44	; 68
    17ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	8b a3       	std	Y+35, r24	; 0x23
    17d4:	9c a3       	std	Y+36, r25	; 0x24
    17d6:	ad a3       	std	Y+37, r26	; 0x25
    17d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17da:	6b a1       	ldd	r22, Y+35	; 0x23
    17dc:	7c a1       	ldd	r23, Y+36	; 0x24
    17de:	8d a1       	ldd	r24, Y+37	; 0x25
    17e0:	9e a1       	ldd	r25, Y+38	; 0x26
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	5f e3       	ldi	r21, 0x3F	; 63
    17ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	2c f4       	brge	.+10     	; 0x17fc <__vector_3+0x1e6>
		__ticks = 1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9a a3       	std	Y+34, r25	; 0x22
    17f8:	89 a3       	std	Y+33, r24	; 0x21
    17fa:	3f c0       	rjmp	.+126    	; 0x187a <__vector_3+0x264>
	else if (__tmp > 65535)
    17fc:	6b a1       	ldd	r22, Y+35	; 0x23
    17fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1800:	8d a1       	ldd	r24, Y+37	; 0x25
    1802:	9e a1       	ldd	r25, Y+38	; 0x26
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	3f ef       	ldi	r19, 0xFF	; 255
    1808:	4f e7       	ldi	r20, 0x7F	; 127
    180a:	57 e4       	ldi	r21, 0x47	; 71
    180c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1810:	18 16       	cp	r1, r24
    1812:	4c f5       	brge	.+82     	; 0x1866 <__vector_3+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1814:	6f a1       	ldd	r22, Y+39	; 0x27
    1816:	78 a5       	ldd	r23, Y+40	; 0x28
    1818:	89 a5       	ldd	r24, Y+41	; 0x29
    181a:	9a a5       	ldd	r25, Y+42	; 0x2a
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e2       	ldi	r20, 0x20	; 32
    1822:	51 e4       	ldi	r21, 0x41	; 65
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9a a3       	std	Y+34, r25	; 0x22
    183a:	89 a3       	std	Y+33, r24	; 0x21
    183c:	0f c0       	rjmp	.+30     	; 0x185c <__vector_3+0x246>
    183e:	88 ec       	ldi	r24, 0xC8	; 200
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	98 a3       	std	Y+32, r25	; 0x20
    1844:	8f 8f       	std	Y+31, r24	; 0x1f
    1846:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1848:	98 a1       	ldd	r25, Y+32	; 0x20
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <__vector_3+0x234>
    184e:	98 a3       	std	Y+32, r25	; 0x20
    1850:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1852:	89 a1       	ldd	r24, Y+33	; 0x21
    1854:	9a a1       	ldd	r25, Y+34	; 0x22
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	9a a3       	std	Y+34, r25	; 0x22
    185a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185c:	89 a1       	ldd	r24, Y+33	; 0x21
    185e:	9a a1       	ldd	r25, Y+34	; 0x22
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	69 f7       	brne	.-38     	; 0x183e <__vector_3+0x228>
    1864:	14 c0       	rjmp	.+40     	; 0x188e <__vector_3+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1866:	6b a1       	ldd	r22, Y+35	; 0x23
    1868:	7c a1       	ldd	r23, Y+36	; 0x24
    186a:	8d a1       	ldd	r24, Y+37	; 0x25
    186c:	9e a1       	ldd	r25, Y+38	; 0x26
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9a a3       	std	Y+34, r25	; 0x22
    1878:	89 a3       	std	Y+33, r24	; 0x21
    187a:	89 a1       	ldd	r24, Y+33	; 0x21
    187c:	9a a1       	ldd	r25, Y+34	; 0x22
    187e:	9e 8f       	std	Y+30, r25	; 0x1e
    1880:	8d 8f       	std	Y+29, r24	; 0x1d
    1882:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1884:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <__vector_3+0x270>
    188a:	9e 8f       	std	Y+30, r25	; 0x1e
    188c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		LCD_vidWriteString(" 2");
    188e:	8e e7       	ldi	r24, 0x7E	; 126
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_vidWriteString>
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	aa e7       	ldi	r26, 0x7A	; 122
    189c:	b4 e4       	ldi	r27, 0x44	; 68
    189e:	89 8f       	std	Y+25, r24	; 0x19
    18a0:	9a 8f       	std	Y+26, r25	; 0x1a
    18a2:	ab 8f       	std	Y+27, r26	; 0x1b
    18a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a6:	69 8d       	ldd	r22, Y+25	; 0x19
    18a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a ef       	ldi	r20, 0xFA	; 250
    18b4:	54 e4       	ldi	r21, 0x44	; 68
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	8d 8b       	std	Y+21, r24	; 0x15
    18c0:	9e 8b       	std	Y+22, r25	; 0x16
    18c2:	af 8b       	std	Y+23, r26	; 0x17
    18c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18c6:	6d 89       	ldd	r22, Y+21	; 0x15
    18c8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ca:	8f 89       	ldd	r24, Y+23	; 0x17
    18cc:	98 8d       	ldd	r25, Y+24	; 0x18
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e8       	ldi	r20, 0x80	; 128
    18d4:	5f e3       	ldi	r21, 0x3F	; 63
    18d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18da:	88 23       	and	r24, r24
    18dc:	2c f4       	brge	.+10     	; 0x18e8 <__vector_3+0x2d2>
		__ticks = 1;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9c 8b       	std	Y+20, r25	; 0x14
    18e4:	8b 8b       	std	Y+19, r24	; 0x13
    18e6:	3f c0       	rjmp	.+126    	; 0x1966 <__vector_3+0x350>
	else if (__tmp > 65535)
    18e8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ea:	7e 89       	ldd	r23, Y+22	; 0x16
    18ec:	8f 89       	ldd	r24, Y+23	; 0x17
    18ee:	98 8d       	ldd	r25, Y+24	; 0x18
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	3f ef       	ldi	r19, 0xFF	; 255
    18f4:	4f e7       	ldi	r20, 0x7F	; 127
    18f6:	57 e4       	ldi	r21, 0x47	; 71
    18f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	4c f5       	brge	.+82     	; 0x1952 <__vector_3+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1900:	69 8d       	ldd	r22, Y+25	; 0x19
    1902:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1906:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e2       	ldi	r20, 0x20	; 32
    190e:	51 e4       	ldi	r21, 0x41	; 65
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	bc 01       	movw	r22, r24
    191a:	cd 01       	movw	r24, r26
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9c 8b       	std	Y+20, r25	; 0x14
    1926:	8b 8b       	std	Y+19, r24	; 0x13
    1928:	0f c0       	rjmp	.+30     	; 0x1948 <__vector_3+0x332>
    192a:	88 ec       	ldi	r24, 0xC8	; 200
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	9a 8b       	std	Y+18, r25	; 0x12
    1930:	89 8b       	std	Y+17, r24	; 0x11
    1932:	89 89       	ldd	r24, Y+17	; 0x11
    1934:	9a 89       	ldd	r25, Y+18	; 0x12
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <__vector_3+0x320>
    193a:	9a 8b       	std	Y+18, r25	; 0x12
    193c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193e:	8b 89       	ldd	r24, Y+19	; 0x13
    1940:	9c 89       	ldd	r25, Y+20	; 0x14
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1948:	8b 89       	ldd	r24, Y+19	; 0x13
    194a:	9c 89       	ldd	r25, Y+20	; 0x14
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	69 f7       	brne	.-38     	; 0x192a <__vector_3+0x314>
    1950:	14 c0       	rjmp	.+40     	; 0x197a <__vector_3+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1952:	6d 89       	ldd	r22, Y+21	; 0x15
    1954:	7e 89       	ldd	r23, Y+22	; 0x16
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9c 8b       	std	Y+20, r25	; 0x14
    1964:	8b 8b       	std	Y+19, r24	; 0x13
    1966:	8b 89       	ldd	r24, Y+19	; 0x13
    1968:	9c 89       	ldd	r25, Y+20	; 0x14
    196a:	98 8b       	std	Y+16, r25	; 0x10
    196c:	8f 87       	std	Y+15, r24	; 0x0f
    196e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1970:	98 89       	ldd	r25, Y+16	; 0x10
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	f1 f7       	brne	.-4      	; 0x1972 <__vector_3+0x35c>
    1976:	98 8b       	std	Y+16, r25	; 0x10
    1978:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_vidWriteString(" 1");
    197a:	81 e8       	ldi	r24, 0x81	; 129
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_vidWriteString>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	aa e7       	ldi	r26, 0x7A	; 122
    1988:	b4 e4       	ldi	r27, 0x44	; 68
    198a:	8b 87       	std	Y+11, r24	; 0x0b
    198c:	9c 87       	std	Y+12, r25	; 0x0c
    198e:	ad 87       	std	Y+13, r26	; 0x0d
    1990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	6b 85       	ldd	r22, Y+11	; 0x0b
    1994:	7c 85       	ldd	r23, Y+12	; 0x0c
    1996:	8d 85       	ldd	r24, Y+13	; 0x0d
    1998:	9e 85       	ldd	r25, Y+14	; 0x0e
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a ef       	ldi	r20, 0xFA	; 250
    19a0:	54 e4       	ldi	r21, 0x44	; 68
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8f 83       	std	Y+7, r24	; 0x07
    19ac:	98 87       	std	Y+8, r25	; 0x08
    19ae:	a9 87       	std	Y+9, r26	; 0x09
    19b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <__vector_3+0x3be>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <__vector_3+0x43c>
	else if (__tmp > 65535)
    19d4:	6f 81       	ldd	r22, Y+7	; 0x07
    19d6:	78 85       	ldd	r23, Y+8	; 0x08
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	9a 85       	ldd	r25, Y+10	; 0x0a
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <__vector_3+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <__vector_3+0x41e>
    1a16:	88 ec       	ldi	r24, 0xC8	; 200
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <__vector_3+0x40c>
    1a26:	9c 83       	std	Y+4, r25	; 0x04
    1a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <__vector_3+0x400>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <__vector_3+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <__vector_3+0x448>
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		DIO_u8SetPinValue(DIO_enuPORTA,DIO_enuPIN3,DIO_enuLow);
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	63 e0       	ldi	r22, 0x03	; 3
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_enuPORTA,DIO_enuPIN2,DIO_enuLow);
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	62 e0       	ldi	r22, 0x02	; 2
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
		LCD_vidWriteCommand(LCD_u8CLEAR_DISPLAY);
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>
		IntpCase=SHOME_START_STATE;
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	90 93 ae 00 	sts	0x00AE, r25
    1a88:	80 93 ad 00 	sts	0x00AD, r24
		LOC_u8Trials=0;
    1a8c:	10 92 d1 00 	sts	0x00D1, r1
    1a90:	10 92 d0 00 	sts	0x00D0, r1
		FLAG=0;
    1a94:	10 92 d2 00 	sts	0x00D2, r1
    1a98:	10 92 d1 00 	sts	0x00D1, r1
	}
}
    1a9c:	e8 96       	adiw	r28, 0x38	; 56
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	ff 91       	pop	r31
    1aa8:	ef 91       	pop	r30
    1aaa:	bf 91       	pop	r27
    1aac:	af 91       	pop	r26
    1aae:	9f 91       	pop	r25
    1ab0:	8f 91       	pop	r24
    1ab2:	7f 91       	pop	r23
    1ab4:	6f 91       	pop	r22
    1ab6:	5f 91       	pop	r21
    1ab8:	4f 91       	pop	r20
    1aba:	3f 91       	pop	r19
    1abc:	2f 91       	pop	r18
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	0f 90       	pop	r0
    1ac4:	1f 90       	pop	r1
    1ac6:	18 95       	reti

00001ac8 <INTP_vidInit>:

#endif

void INTP_vidInit()
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
		}
#endif

#if	INTP2_STATE==INTP_ENABLE

	SET_BIT(GICR,GICR_INT2);
    1ad0:	ab e5       	ldi	r26, 0x5B	; 91
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	eb e5       	ldi	r30, 0x5B	; 91
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 62       	ori	r24, 0x20	; 32
    1adc:	8c 93       	st	X, r24
	switch(INTP2_EVENT_TYPE)
	{
		case INTP_FALLING_EGDE:
		CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
    1ade:	a4 e5       	ldi	r26, 0x54	; 84
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e4 e5       	ldi	r30, 0x54	; 84
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8f 7b       	andi	r24, 0xBF	; 191
    1aea:	8c 93       	st	X, r24

	}

#endif

	SET_BIT(SREG,SREG_GIE);  // it's better to be the last one to be configured to avoid miss behavior (maybe flag was one before for any reason )
    1aec:	af e5       	ldi	r26, 0x5F	; 95
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	ef e5       	ldi	r30, 0x5F	; 95
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	80 68       	ori	r24, 0x80	; 128
    1af8:	8c 93       	st	X, r24

}
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <INTP_vidIntp0Enable>:
//INTP0
void INTP_vidIntp0Enable()
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,GICR_INT0);
    1b08:	ab e5       	ldi	r26, 0x5B	; 91
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	eb e5       	ldi	r30, 0x5B	; 91
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 64       	ori	r24, 0x40	; 64
    1b14:	8c 93       	st	X, r24
	return;
}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <INTP_vidIntp0Disable>:
void INTP_vidIntp0Disable()
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR,GICR_INT0);
    1b24:	ab e5       	ldi	r26, 0x5B	; 91
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	eb e5       	ldi	r30, 0x5B	; 91
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8f 7b       	andi	r24, 0xBF	; 191
    1b30:	8c 93       	st	X, r24
	return;
}
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <INTP_vidIntp1Enable>:

//INTP1
void INTP_vidIntp1Enable()
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,GICR_INT1);
    1b40:	ab e5       	ldi	r26, 0x5B	; 91
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	eb e5       	ldi	r30, 0x5B	; 91
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 68       	ori	r24, 0x80	; 128
    1b4c:	8c 93       	st	X, r24
	return;
}
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <INTP_vidIntp1Disable>:
void INTP_vidIntp1Disable()
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR,GICR_INT1);
    1b5c:	ab e5       	ldi	r26, 0x5B	; 91
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	eb e5       	ldi	r30, 0x5B	; 91
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	8f 77       	andi	r24, 0x7F	; 127
    1b68:	8c 93       	st	X, r24
	return;
}
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <INTP_vidIntp2Enable>:
//INTP2
void INTP_vidIntp2Enable()
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,GICR_INT2);
    1b78:	ab e5       	ldi	r26, 0x5B	; 91
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	eb e5       	ldi	r30, 0x5B	; 91
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 62       	ori	r24, 0x20	; 32
    1b84:	8c 93       	st	X, r24
	return;
}
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <INTP_vidIntp2Disable>:

void INTP_vidIntp2Disable()
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR,GICR_INT2);
    1b94:	ab e5       	ldi	r26, 0x5B	; 91
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	eb e5       	ldi	r30, 0x5B	; 91
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8f 7d       	andi	r24, 0xDF	; 223
    1ba0:	8c 93       	st	X, r24
	return;
}
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <INTP_vidIntp0EventType>:

void INTP_vidIntp0EventType(u8 COPY_u8Event)
{
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <INTP_vidIntp0EventType+0x6>
    1bae:	0f 92       	push	r0
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	89 83       	std	Y+1, r24	; 0x01
	//the event type
	switch(COPY_u8Event)
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	3b 83       	std	Y+3, r19	; 0x03
    1bbe:	2a 83       	std	Y+2, r18	; 0x02
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	21 f1       	breq	.+72     	; 0x1c12 <INTP_vidIntp0EventType+0x6a>
    1bca:	2a 81       	ldd	r18, Y+2	; 0x02
    1bcc:	3b 81       	ldd	r19, Y+3	; 0x03
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	2c f4       	brge	.+10     	; 0x1bde <INTP_vidIntp0EventType+0x36>
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <INTP_vidIntp0EventType+0x4c>
    1bdc:	46 c0       	rjmp	.+140    	; 0x1c6a <INTP_vidIntp0EventType+0xc2>
    1bde:	2a 81       	ldd	r18, Y+2	; 0x02
    1be0:	3b 81       	ldd	r19, Y+3	; 0x03
    1be2:	22 30       	cpi	r18, 0x02	; 2
    1be4:	31 05       	cpc	r19, r1
    1be6:	21 f1       	breq	.+72     	; 0x1c30 <INTP_vidIntp0EventType+0x88>
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	9b 81       	ldd	r25, Y+3	; 0x03
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	91 05       	cpc	r25, r1
    1bf0:	71 f1       	breq	.+92     	; 0x1c4e <INTP_vidIntp0EventType+0xa6>
    1bf2:	3b c0       	rjmp	.+118    	; 0x1c6a <INTP_vidIntp0EventType+0xc2>
	{
		case INTP_FALLING_EGDE:
		CLEAR_BIT(MCUCR,MCUCR_ISC00);
    1bf4:	a5 e5       	ldi	r26, 0x55	; 85
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e5 e5       	ldi	r30, 0x55	; 85
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8e 7f       	andi	r24, 0xFE	; 254
    1c00:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
    1c02:	a5 e5       	ldi	r26, 0x55	; 85
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e5 e5       	ldi	r30, 0x55	; 85
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	82 60       	ori	r24, 0x02	; 2
    1c0e:	8c 93       	st	X, r24
    1c10:	2c c0       	rjmp	.+88     	; 0x1c6a <INTP_vidIntp0EventType+0xc2>
		break;
		case INTP_RISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC00);
    1c12:	a5 e5       	ldi	r26, 0x55	; 85
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e5 e5       	ldi	r30, 0x55	; 85
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	81 60       	ori	r24, 0x01	; 1
    1c1e:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
    1c20:	a5 e5       	ldi	r26, 0x55	; 85
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e5 e5       	ldi	r30, 0x55	; 85
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	82 60       	ori	r24, 0x02	; 2
    1c2c:	8c 93       	st	X, r24
    1c2e:	1d c0       	rjmp	.+58     	; 0x1c6a <INTP_vidIntp0EventType+0xc2>
		break;
		case INTP_ON_CHANGE:
		SET_BIT(MCUCR,MCUCR_ISC00);
    1c30:	a5 e5       	ldi	r26, 0x55	; 85
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e5 e5       	ldi	r30, 0x55	; 85
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	81 60       	ori	r24, 0x01	; 1
    1c3c:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1c3e:	a5 e5       	ldi	r26, 0x55	; 85
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e5 e5       	ldi	r30, 0x55	; 85
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	8d 7f       	andi	r24, 0xFD	; 253
    1c4a:	8c 93       	st	X, r24
    1c4c:	0e c0       	rjmp	.+28     	; 0x1c6a <INTP_vidIntp0EventType+0xc2>
		break;
		case INTP_LOW_LEVEL:
		CLEAR_BIT(MCUCR,MCUCR_ISC00);
    1c4e:	a5 e5       	ldi	r26, 0x55	; 85
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e5 e5       	ldi	r30, 0x55	; 85
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	8e 7f       	andi	r24, 0xFE	; 254
    1c5a:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR,MCUCR_ISC01);
    1c5c:	a5 e5       	ldi	r26, 0x55	; 85
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e5 e5       	ldi	r30, 0x55	; 85
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	8d 7f       	andi	r24, 0xFD	; 253
    1c68:	8c 93       	st	X, r24
		break;
	}
	return;
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <INTP_vidIntp1EventType>:


//Interrupt 1 event type

void INTP_vidIntp1EventType(u8 COPY_u8EventType)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <INTP_vidIntp1EventType+0x6>
    1c7c:	0f 92       	push	r0
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	89 83       	std	Y+1, r24	; 0x01
	//the event type
	switch(COPY_u8EventType)
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	3b 83       	std	Y+3, r19	; 0x03
    1c8c:	2a 83       	std	Y+2, r18	; 0x02
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	9b 81       	ldd	r25, Y+3	; 0x03
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	91 05       	cpc	r25, r1
    1c96:	21 f1       	breq	.+72     	; 0x1ce0 <INTP_vidIntp1EventType+0x6a>
    1c98:	2a 81       	ldd	r18, Y+2	; 0x02
    1c9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c9c:	22 30       	cpi	r18, 0x02	; 2
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	2c f4       	brge	.+10     	; 0x1cac <INTP_vidIntp1EventType+0x36>
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	61 f0       	breq	.+24     	; 0x1cc2 <INTP_vidIntp1EventType+0x4c>
    1caa:	46 c0       	rjmp	.+140    	; 0x1d38 <INTP_vidIntp1EventType+0xc2>
    1cac:	2a 81       	ldd	r18, Y+2	; 0x02
    1cae:	3b 81       	ldd	r19, Y+3	; 0x03
    1cb0:	22 30       	cpi	r18, 0x02	; 2
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	21 f1       	breq	.+72     	; 0x1cfe <INTP_vidIntp1EventType+0x88>
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cba:	83 30       	cpi	r24, 0x03	; 3
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	71 f1       	breq	.+92     	; 0x1d1c <INTP_vidIntp1EventType+0xa6>
    1cc0:	3b c0       	rjmp	.+118    	; 0x1d38 <INTP_vidIntp1EventType+0xc2>
		{
			case INTP_FALLING_EGDE:
			CLEAR_BIT(MCUCR,MCUCR_ISC10);
    1cc2:	a5 e5       	ldi	r26, 0x55	; 85
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e5 e5       	ldi	r30, 0x55	; 85
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8b 7f       	andi	r24, 0xFB	; 251
    1cce:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    1cd0:	a5 e5       	ldi	r26, 0x55	; 85
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e5 e5       	ldi	r30, 0x55	; 85
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	88 60       	ori	r24, 0x08	; 8
    1cdc:	8c 93       	st	X, r24
    1cde:	2c c0       	rjmp	.+88     	; 0x1d38 <INTP_vidIntp1EventType+0xc2>
			break;
			case INTP_RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    1ce0:	a5 e5       	ldi	r26, 0x55	; 85
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e5 e5       	ldi	r30, 0x55	; 85
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	84 60       	ori	r24, 0x04	; 4
    1cec:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    1cee:	a5 e5       	ldi	r26, 0x55	; 85
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e5 e5       	ldi	r30, 0x55	; 85
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	88 60       	ori	r24, 0x08	; 8
    1cfa:	8c 93       	st	X, r24
    1cfc:	1d c0       	rjmp	.+58     	; 0x1d38 <INTP_vidIntp1EventType+0xc2>
			break;
			case INTP_ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    1cfe:	a5 e5       	ldi	r26, 0x55	; 85
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e5 e5       	ldi	r30, 0x55	; 85
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	84 60       	ori	r24, 0x04	; 4
    1d0a:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC11);
    1d0c:	a5 e5       	ldi	r26, 0x55	; 85
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e5 e5       	ldi	r30, 0x55	; 85
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	87 7f       	andi	r24, 0xF7	; 247
    1d18:	8c 93       	st	X, r24
    1d1a:	0e c0       	rjmp	.+28     	; 0x1d38 <INTP_vidIntp1EventType+0xc2>
			break;
			case INTP_LOW_LEVEL:
			CLEAR_BIT(MCUCR,MCUCR_ISC10);
    1d1c:	a5 e5       	ldi	r26, 0x55	; 85
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e5 e5       	ldi	r30, 0x55	; 85
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8b 7f       	andi	r24, 0xFB	; 251
    1d28:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,MCUCR_ISC11);
    1d2a:	a5 e5       	ldi	r26, 0x55	; 85
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e5 e5       	ldi	r30, 0x55	; 85
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	87 7f       	andi	r24, 0xF7	; 247
    1d36:	8c 93       	st	X, r24
			break;
		}
	return;
}
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <INTP_vidIntp2EventType>:

// Interrupt 2 Event type

void INTP_vidIntp2EventType(u8 COPY_u8EventType)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <INTP_vidIntp2EventType+0x6>
    1d4a:	0f 92       	push	r0
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_u8EventType)
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	3b 83       	std	Y+3, r19	; 0x03
    1d5a:	2a 83       	std	Y+2, r18	; 0x02
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	31 f0       	breq	.+12     	; 0x1d70 <INTP_vidIntp2EventType+0x2c>
    1d64:	2a 81       	ldd	r18, Y+2	; 0x02
    1d66:	3b 81       	ldd	r19, Y+3	; 0x03
    1d68:	21 30       	cpi	r18, 0x01	; 1
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	49 f0       	breq	.+18     	; 0x1d80 <INTP_vidIntp2EventType+0x3c>
    1d6e:	0f c0       	rjmp	.+30     	; 0x1d8e <INTP_vidIntp2EventType+0x4a>
	{
		case INTP_FALLING_EGDE:
		CLEAR_BIT(MCUCSR,MCUCSR_ISC2);
    1d70:	a4 e5       	ldi	r26, 0x54	; 84
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e4 e5       	ldi	r30, 0x54	; 84
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	8f 7b       	andi	r24, 0xBF	; 191
    1d7c:	8c 93       	st	X, r24
    1d7e:	07 c0       	rjmp	.+14     	; 0x1d8e <INTP_vidIntp2EventType+0x4a>
		break;
		case INTP_RISING_EDGE:
		SET_BIT(MCUCSR,MCUCSR_ISC2);
    1d80:	a4 e5       	ldi	r26, 0x54	; 84
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e4 e5       	ldi	r30, 0x54	; 84
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	80 64       	ori	r24, 0x40	; 64
    1d8c:	8c 93       	st	X, r24

	}
	return;
}
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <INTP_vidEnableGlobalInterrupt>:

//Enable Global Interrupt

void INTP_vidEnableGlobalInterrupt()
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG,SREG_GIE);
    1da2:	af e5       	ldi	r26, 0x5F	; 95
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	ef e5       	ldi	r30, 0x5F	; 95
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	80 68       	ori	r24, 0x80	; 128
    1dae:	8c 93       	st	X, r24
}
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <INTP_vidDisbleGlobalInterrupt>:

//Disable Global Interrupt

void INTP_vidDisbleGlobalInterrupt()
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
CLEAR_BIT(SREG,SREG_GIE);
    1dbe:	af e5       	ldi	r26, 0x5F	; 95
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	ef e5       	ldi	r30, 0x5F	; 95
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	8f 77       	andi	r24, 0x7F	; 127
    1dca:	8c 93       	st	X, r24
}
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <KPD_vidInit>:
 * input : void
 * output: void
 *
 */
void KPD_vidInit(void)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
	//setting rows pins as input and pulled up
	DIO_u8SetPortDirection(KPD_u8CONNECT_PORT,0xF0);
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	60 ef       	ldi	r22, 0xF0	; 240
    1dde:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(KPD_u8CONNECT_PORT,0xFF);
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	6f ef       	ldi	r22, 0xFF	; 255
    1de6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_u8SetPortValue>
return;
}
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <KPD_vidGetKey>:
//    }
//}


void KPD_vidGetKey(u8* COPY_pu8KeyPressed)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	63 97       	sbiw	r28, 0x13	; 19
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	9b 8b       	std	Y+19, r25	; 0x13
    1e06:	8a 8b       	std	Y+18, r24	; 0x12
	*COPY_pu8KeyPressed=0;
    1e08:	ea 89       	ldd	r30, Y+18	; 0x12
    1e0a:	fb 89       	ldd	r31, Y+19	; 0x13
    1e0c:	10 82       	st	Z, r1
	u8 LOC_pu8Value;
	DIO_u8SetPortValue(KPD_u8CONNECT_PORT,0xFF);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	6f ef       	ldi	r22, 0xFF	; 255
    1e12:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_u8SetPortValue>

	for(u8 col=KPD_u8MAX_COL_PIN-4 ; col<KPD_u8MAX_COL_PIN ;col++)
    1e16:	84 e0       	ldi	r24, 0x04	; 4
    1e18:	88 8b       	std	Y+16, r24	; 0x10
    1e1a:	ab c0       	rjmp	.+342    	; 0x1f72 <KPD_vidGetKey+0x182>
	{
		DIO_u8SetPinValue(KPD_u8CONNECT_PORT,col,DIO_enuLow);
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	68 89       	ldd	r22, Y+16	; 0x10
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a0 ea       	ldi	r26, 0xA0	; 160
    1e2c:	b1 e4       	ldi	r27, 0x41	; 65
    1e2e:	8b 87       	std	Y+11, r24	; 0x0b
    1e30:	9c 87       	std	Y+12, r25	; 0x0c
    1e32:	ad 87       	std	Y+13, r26	; 0x0d
    1e34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a ef       	ldi	r20, 0xFA	; 250
    1e44:	54 e4       	ldi	r21, 0x44	; 68
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	8f 83       	std	Y+7, r24	; 0x07
    1e50:	98 87       	std	Y+8, r25	; 0x08
    1e52:	a9 87       	std	Y+9, r26	; 0x09
    1e54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e56:	6f 81       	ldd	r22, Y+7	; 0x07
    1e58:	78 85       	ldd	r23, Y+8	; 0x08
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <KPD_vidGetKey+0x88>
		__ticks = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
    1e76:	3f c0       	rjmp	.+126    	; 0x1ef6 <KPD_vidGetKey+0x106>
	else if (__tmp > 65535)
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	57 e4       	ldi	r21, 0x47	; 71
    1e88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	4c f5       	brge	.+82     	; 0x1ee2 <KPD_vidGetKey+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <KPD_vidGetKey+0xe8>
    1eba:	88 ec       	ldi	r24, 0xC8	; 200
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <KPD_vidGetKey+0xd6>
    1eca:	9c 83       	std	Y+4, r25	; 0x04
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	9e 81       	ldd	r25, Y+6	; 0x06
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	69 f7       	brne	.-38     	; 0x1eba <KPD_vidGetKey+0xca>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <KPD_vidGetKey+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <KPD_vidGetKey+0x112>
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);

		for(u8 row=KPD_u8MAX_ROW_PIN-4 ; row<KPD_u8MAX_ROW_PIN ;row++)
    1f0a:	1f 86       	std	Y+15, r1	; 0x0f
    1f0c:	28 c0       	rjmp	.+80     	; 0x1f5e <KPD_vidGetKey+0x16e>
		{
			do{

			DIO_u8GetPinValue(KPD_u8CONNECT_PORT,row,&LOC_pu8Value);
    1f0e:	9e 01       	movw	r18, r28
    1f10:	2f 5e       	subi	r18, 0xEF	; 239
    1f12:	3f 4f       	sbci	r19, 0xFF	; 255
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f18:	a9 01       	movw	r20, r18
    1f1a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8GetPinValue>

			if(LOC_pu8Value == DIO_enuLow)
    1f1e:	89 89       	ldd	r24, Y+17	; 0x11
    1f20:	88 23       	and	r24, r24
    1f22:	b9 f4       	brne	.+46     	; 0x1f52 <KPD_vidGetKey+0x162>
			{

				*COPY_pu8KeyPressed=LOC_au8SwitchID[row][col-4];
    1f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f26:	48 2f       	mov	r20, r24
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	88 89       	ldd	r24, Y+16	; 0x10
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9c 01       	movw	r18, r24
    1f32:	24 50       	subi	r18, 0x04	; 4
    1f34:	30 40       	sbci	r19, 0x00	; 0
    1f36:	ca 01       	movw	r24, r20
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	82 0f       	add	r24, r18
    1f42:	93 1f       	adc	r25, r19
    1f44:	fc 01       	movw	r30, r24
    1f46:	e3 56       	subi	r30, 0x63	; 99
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 81       	ld	r24, Z
    1f4c:	ea 89       	ldd	r30, Y+18	; 0x12
    1f4e:	fb 89       	ldd	r31, Y+19	; 0x13
    1f50:	80 83       	st	Z, r24

			}}while(LOC_pu8Value == DIO_enuLow);
    1f52:	89 89       	ldd	r24, Y+17	; 0x11
    1f54:	88 23       	and	r24, r24
    1f56:	d9 f2       	breq	.-74     	; 0x1f0e <KPD_vidGetKey+0x11e>
	for(u8 col=KPD_u8MAX_COL_PIN-4 ; col<KPD_u8MAX_COL_PIN ;col++)
	{
		DIO_u8SetPinValue(KPD_u8CONNECT_PORT,col,DIO_enuLow);
		_delay_ms(20);

		for(u8 row=KPD_u8MAX_ROW_PIN-4 ; row<KPD_u8MAX_ROW_PIN ;row++)
    1f58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f5a:	8f 5f       	subi	r24, 0xFF	; 255
    1f5c:	8f 87       	std	Y+15, r24	; 0x0f
    1f5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f60:	84 30       	cpi	r24, 0x04	; 4
    1f62:	a8 f2       	brcs	.-86     	; 0x1f0e <KPD_vidGetKey+0x11e>
				*COPY_pu8KeyPressed=LOC_au8SwitchID[row][col-4];

			}}while(LOC_pu8Value == DIO_enuLow);

		}
		DIO_u8SetPortValue(KPD_u8CONNECT_PORT,0xFF);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	6f ef       	ldi	r22, 0xFF	; 255
    1f68:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_u8SetPortValue>
{
	*COPY_pu8KeyPressed=0;
	u8 LOC_pu8Value;
	DIO_u8SetPortValue(KPD_u8CONNECT_PORT,0xFF);

	for(u8 col=KPD_u8MAX_COL_PIN-4 ; col<KPD_u8MAX_COL_PIN ;col++)
    1f6c:	88 89       	ldd	r24, Y+16	; 0x10
    1f6e:	8f 5f       	subi	r24, 0xFF	; 255
    1f70:	88 8b       	std	Y+16, r24	; 0x10
    1f72:	88 89       	ldd	r24, Y+16	; 0x10
    1f74:	88 30       	cpi	r24, 0x08	; 8
    1f76:	08 f4       	brcc	.+2      	; 0x1f7a <KPD_vidGetKey+0x18a>
    1f78:	51 cf       	rjmp	.-350    	; 0x1e1c <KPD_vidGetKey+0x2c>
		}
		DIO_u8SetPortValue(KPD_u8CONNECT_PORT,0xFF);

	}
	return;
}
    1f7a:	63 96       	adiw	r28, 0x13	; 19
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <LCD_vidInitialize>:




void LCD_vidInitialize(void)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	e8 97       	sbiw	r28, 0x38	; 56
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(LCD_u8DATA_PORT,(u8)0xFF);
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	6f ef       	ldi	r22, 0xFF	; 255
    1fa4:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(LCD_u8CONTROL_PORT,(u8)0xFF);
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	6f ef       	ldi	r22, 0xFF	; 255
    1fac:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(LCD_u8CONTROL_PORT,LCD_u8EN_PIN,DIO_enuOutput);
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 30 07 	call	0xe60	; 0xe60 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_u8CONTROL_PORT,LCD_u8RS_PIN,DIO_enuOutput);
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 30 07 	call	0xe60	; 0xe60 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_u8CONTROL_PORT,LCD_u8RW_PIN,DIO_enuOutput);
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	62 e0       	ldi	r22, 0x02	; 2
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 30 07 	call	0xe60	; 0xe60 <DIO_u8SetPinDirection>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	ac e0       	ldi	r26, 0x0C	; 12
    1fd4:	b2 e4       	ldi	r27, 0x42	; 66
    1fd6:	8d ab       	std	Y+53, r24	; 0x35
    1fd8:	9e ab       	std	Y+54, r25	; 0x36
    1fda:	af ab       	std	Y+55, r26	; 0x37
    1fdc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fe2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a ef       	ldi	r20, 0xFA	; 250
    1fec:	54 e4       	ldi	r21, 0x44	; 68
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	89 ab       	std	Y+49, r24	; 0x31
    1ff8:	9a ab       	std	Y+50, r25	; 0x32
    1ffa:	ab ab       	std	Y+51, r26	; 0x33
    1ffc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ffe:	69 a9       	ldd	r22, Y+49	; 0x31
    2000:	7a a9       	ldd	r23, Y+50	; 0x32
    2002:	8b a9       	ldd	r24, Y+51	; 0x33
    2004:	9c a9       	ldd	r25, Y+52	; 0x34
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <LCD_vidInitialize+0x94>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	98 ab       	std	Y+48, r25	; 0x30
    201c:	8f a7       	std	Y+47, r24	; 0x2f
    201e:	3f c0       	rjmp	.+126    	; 0x209e <LCD_vidInitialize+0x112>
	else if (__tmp > 65535)
    2020:	69 a9       	ldd	r22, Y+49	; 0x31
    2022:	7a a9       	ldd	r23, Y+50	; 0x32
    2024:	8b a9       	ldd	r24, Y+51	; 0x33
    2026:	9c a9       	ldd	r25, Y+52	; 0x34
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <LCD_vidInitialize+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6d a9       	ldd	r22, Y+53	; 0x35
    203a:	7e a9       	ldd	r23, Y+54	; 0x36
    203c:	8f a9       	ldd	r24, Y+55	; 0x37
    203e:	98 ad       	ldd	r25, Y+56	; 0x38
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	98 ab       	std	Y+48, r25	; 0x30
    205e:	8f a7       	std	Y+47, r24	; 0x2f
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <LCD_vidInitialize+0xf4>
    2062:	88 ec       	ldi	r24, 0xC8	; 200
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9e a7       	std	Y+46, r25	; 0x2e
    2068:	8d a7       	std	Y+45, r24	; 0x2d
    206a:	8d a5       	ldd	r24, Y+45	; 0x2d
    206c:	9e a5       	ldd	r25, Y+46	; 0x2e
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_vidInitialize+0xe2>
    2072:	9e a7       	std	Y+46, r25	; 0x2e
    2074:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	8f a5       	ldd	r24, Y+47	; 0x2f
    2078:	98 a9       	ldd	r25, Y+48	; 0x30
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	98 ab       	std	Y+48, r25	; 0x30
    207e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	8f a5       	ldd	r24, Y+47	; 0x2f
    2082:	98 a9       	ldd	r25, Y+48	; 0x30
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <LCD_vidInitialize+0xd6>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <LCD_vidInitialize+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	69 a9       	ldd	r22, Y+49	; 0x31
    208c:	7a a9       	ldd	r23, Y+50	; 0x32
    208e:	8b a9       	ldd	r24, Y+51	; 0x33
    2090:	9c a9       	ldd	r25, Y+52	; 0x34
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	98 ab       	std	Y+48, r25	; 0x30
    209c:	8f a7       	std	Y+47, r24	; 0x2f
    209e:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a0:	98 a9       	ldd	r25, Y+48	; 0x30
    20a2:	9c a7       	std	Y+44, r25	; 0x2c
    20a4:	8b a7       	std	Y+43, r24	; 0x2b
    20a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_vidInitialize+0x11e>
    20ae:	9c a7       	std	Y+44, r25	; 0x2c
    20b0:	8b a7       	std	Y+43, r24	; 0x2b
	/*function set
	 *	data length 8 bits
	 *	2 lines
	 *	big font
	 */
	LCD_vidWriteCommand(0b00111100);
    20b2:	8c e3       	ldi	r24, 0x3C	; 60
    20b4:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e8       	ldi	r26, 0x80	; 128
    20be:	bf e3       	ldi	r27, 0x3F	; 63
    20c0:	8f a3       	std	Y+39, r24	; 0x27
    20c2:	98 a7       	std	Y+40, r25	; 0x28
    20c4:	a9 a7       	std	Y+41, r26	; 0x29
    20c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ca:	78 a5       	ldd	r23, Y+40	; 0x28
    20cc:	89 a5       	ldd	r24, Y+41	; 0x29
    20ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	4a ef       	ldi	r20, 0xFA	; 250
    20d6:	54 e4       	ldi	r21, 0x44	; 68
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	8b a3       	std	Y+35, r24	; 0x23
    20e2:	9c a3       	std	Y+36, r25	; 0x24
    20e4:	ad a3       	std	Y+37, r26	; 0x25
    20e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20e8:	6b a1       	ldd	r22, Y+35	; 0x23
    20ea:	7c a1       	ldd	r23, Y+36	; 0x24
    20ec:	8d a1       	ldd	r24, Y+37	; 0x25
    20ee:	9e a1       	ldd	r25, Y+38	; 0x26
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	5f e3       	ldi	r21, 0x3F	; 63
    20f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20fc:	88 23       	and	r24, r24
    20fe:	2c f4       	brge	.+10     	; 0x210a <LCD_vidInitialize+0x17e>
		__ticks = 1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9a a3       	std	Y+34, r25	; 0x22
    2106:	89 a3       	std	Y+33, r24	; 0x21
    2108:	3f c0       	rjmp	.+126    	; 0x2188 <LCD_vidInitialize+0x1fc>
	else if (__tmp > 65535)
    210a:	6b a1       	ldd	r22, Y+35	; 0x23
    210c:	7c a1       	ldd	r23, Y+36	; 0x24
    210e:	8d a1       	ldd	r24, Y+37	; 0x25
    2110:	9e a1       	ldd	r25, Y+38	; 0x26
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	4f e7       	ldi	r20, 0x7F	; 127
    2118:	57 e4       	ldi	r21, 0x47	; 71
    211a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    211e:	18 16       	cp	r1, r24
    2120:	4c f5       	brge	.+82     	; 0x2174 <LCD_vidInitialize+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	6f a1       	ldd	r22, Y+39	; 0x27
    2124:	78 a5       	ldd	r23, Y+40	; 0x28
    2126:	89 a5       	ldd	r24, Y+41	; 0x29
    2128:	9a a5       	ldd	r25, Y+42	; 0x2a
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9a a3       	std	Y+34, r25	; 0x22
    2148:	89 a3       	std	Y+33, r24	; 0x21
    214a:	0f c0       	rjmp	.+30     	; 0x216a <LCD_vidInitialize+0x1de>
    214c:	88 ec       	ldi	r24, 0xC8	; 200
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	98 a3       	std	Y+32, r25	; 0x20
    2152:	8f 8f       	std	Y+31, r24	; 0x1f
    2154:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2156:	98 a1       	ldd	r25, Y+32	; 0x20
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <LCD_vidInitialize+0x1cc>
    215c:	98 a3       	std	Y+32, r25	; 0x20
    215e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2160:	89 a1       	ldd	r24, Y+33	; 0x21
    2162:	9a a1       	ldd	r25, Y+34	; 0x22
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	9a a3       	std	Y+34, r25	; 0x22
    2168:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216a:	89 a1       	ldd	r24, Y+33	; 0x21
    216c:	9a a1       	ldd	r25, Y+34	; 0x22
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	69 f7       	brne	.-38     	; 0x214c <LCD_vidInitialize+0x1c0>
    2172:	14 c0       	rjmp	.+40     	; 0x219c <LCD_vidInitialize+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2174:	6b a1       	ldd	r22, Y+35	; 0x23
    2176:	7c a1       	ldd	r23, Y+36	; 0x24
    2178:	8d a1       	ldd	r24, Y+37	; 0x25
    217a:	9e a1       	ldd	r25, Y+38	; 0x26
    217c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9a a3       	std	Y+34, r25	; 0x22
    2186:	89 a3       	std	Y+33, r24	; 0x21
    2188:	89 a1       	ldd	r24, Y+33	; 0x21
    218a:	9a a1       	ldd	r25, Y+34	; 0x22
    218c:	9e 8f       	std	Y+30, r25	; 0x1e
    218e:	8d 8f       	std	Y+29, r24	; 0x1d
    2190:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2192:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_vidInitialize+0x208>
    2198:	9e 8f       	std	Y+30, r25	; 0x1e
    219a:	8d 8f       	std	Y+29, r24	; 0x1d
	 *Display on/of
	 *	display on
	 *	no cursor
	 *	no blinking
	 */
	LCD_vidWriteCommand(0b00001100);
    219c:	8c e0       	ldi	r24, 0x0C	; 12
    219e:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a0 e8       	ldi	r26, 0x80	; 128
    21a8:	bf e3       	ldi	r27, 0x3F	; 63
    21aa:	89 8f       	std	Y+25, r24	; 0x19
    21ac:	9a 8f       	std	Y+26, r25	; 0x1a
    21ae:	ab 8f       	std	Y+27, r26	; 0x1b
    21b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	69 8d       	ldd	r22, Y+25	; 0x19
    21b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8d 8b       	std	Y+21, r24	; 0x15
    21cc:	9e 8b       	std	Y+22, r25	; 0x16
    21ce:	af 8b       	std	Y+23, r26	; 0x17
    21d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d2:	6d 89       	ldd	r22, Y+21	; 0x15
    21d4:	7e 89       	ldd	r23, Y+22	; 0x16
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <LCD_vidInitialize+0x268>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9c 8b       	std	Y+20, r25	; 0x14
    21f0:	8b 8b       	std	Y+19, r24	; 0x13
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <LCD_vidInitialize+0x2e6>
	else if (__tmp > 65535)
    21f4:	6d 89       	ldd	r22, Y+21	; 0x15
    21f6:	7e 89       	ldd	r23, Y+22	; 0x16
    21f8:	8f 89       	ldd	r24, Y+23	; 0x17
    21fa:	98 8d       	ldd	r25, Y+24	; 0x18
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <LCD_vidInitialize+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	69 8d       	ldd	r22, Y+25	; 0x19
    220e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2210:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2212:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <LCD_vidInitialize+0x2c8>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9a 8b       	std	Y+18, r25	; 0x12
    223c:	89 8b       	std	Y+17, r24	; 0x11
    223e:	89 89       	ldd	r24, Y+17	; 0x11
    2240:	9a 89       	ldd	r25, Y+18	; 0x12
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD_vidInitialize+0x2b6>
    2246:	9a 8b       	std	Y+18, r25	; 0x12
    2248:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8b 89       	ldd	r24, Y+19	; 0x13
    224c:	9c 89       	ldd	r25, Y+20	; 0x14
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8b 89       	ldd	r24, Y+19	; 0x13
    2256:	9c 89       	ldd	r25, Y+20	; 0x14
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <LCD_vidInitialize+0x2aa>
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <LCD_vidInitialize+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	6d 89       	ldd	r22, Y+21	; 0x15
    2260:	7e 89       	ldd	r23, Y+22	; 0x16
    2262:	8f 89       	ldd	r24, Y+23	; 0x17
    2264:	98 8d       	ldd	r25, Y+24	; 0x18
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9c 8b       	std	Y+20, r25	; 0x14
    2270:	8b 8b       	std	Y+19, r24	; 0x13
    2272:	8b 89       	ldd	r24, Y+19	; 0x13
    2274:	9c 89       	ldd	r25, Y+20	; 0x14
    2276:	98 8b       	std	Y+16, r25	; 0x10
    2278:	8f 87       	std	Y+15, r24	; 0x0f
    227a:	8f 85       	ldd	r24, Y+15	; 0x0f
    227c:	98 89       	ldd	r25, Y+16	; 0x10
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_vidInitialize+0x2f2>
    2282:	98 8b       	std	Y+16, r25	; 0x10
    2284:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*clear display
	 *
	 *
	 */
	LCD_vidWriteCommand(0b00000001);
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e0       	ldi	r26, 0x00	; 0
    2292:	b0 e4       	ldi	r27, 0x40	; 64
    2294:	8b 87       	std	Y+11, r24	; 0x0b
    2296:	9c 87       	std	Y+12, r25	; 0x0c
    2298:	ad 87       	std	Y+13, r26	; 0x0d
    229a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	6b 85       	ldd	r22, Y+11	; 0x0b
    229e:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8f 83       	std	Y+7, r24	; 0x07
    22b6:	98 87       	std	Y+8, r25	; 0x08
    22b8:	a9 87       	std	Y+9, r26	; 0x09
    22ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_vidInitialize+0x352>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_vidInitialize+0x3d0>
	else if (__tmp > 65535)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_vidInitialize+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_vidInitialize+0x3b2>
    2320:	88 ec       	ldi	r24, 0xC8	; 200
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	8b 83       	std	Y+3, r24	; 0x03
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_vidInitialize+0x3a0>
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_vidInitialize+0x394>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_vidInitialize+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_vidInitialize+0x3dc>
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*entry mode:
	 * mover to right
	 * no shift
	 */
	LCD_vidWriteCommand(0b00000110);
    2370:	86 e0       	ldi	r24, 0x06	; 6
    2372:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>

	return;
}
    2376:	e8 96       	adiw	r28, 0x38	; 56
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <LCD_vidWriteCommand>:

void LCD_vidWriteCommand(u8 COPY_u8Command)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	2f 97       	sbiw	r28, 0x0f	; 15
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	8f 87       	std	Y+15, r24	; 0x0f

	//DIO_u8SetPinValue(LCD_u8CONTROL_PORT,LCD_u8EN_PIN,DIO_enuLow);
	DIO_u8SetPinValue(LCD_u8CONTROL_PORT,LCD_u8RS_PIN,DIO_enuLow);
    239e:	83 e0       	ldi	r24, 0x03	; 3
    23a0:	61 e0       	ldi	r22, 0x01	; 1
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8CONTROL_PORT,LCD_u8RW_PIN,DIO_enuLow);
    23a8:	83 e0       	ldi	r24, 0x03	; 3
    23aa:	62 e0       	ldi	r22, 0x02	; 2
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>

	DIO_u8SetPortValue(LCD_u8DATA_PORT,COPY_u8Command);
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	6f 85       	ldd	r22, Y+15	; 0x0f
    23b6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_u8CONTROL_PORT,LCD_u8EN_PIN,DIO_enuHigh);
    23ba:	83 e0       	ldi	r24, 0x03	; 3
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	41 e0       	ldi	r20, 0x01	; 1
    23c0:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	a0 e0       	ldi	r26, 0x00	; 0
    23ca:	b0 e4       	ldi	r27, 0x40	; 64
    23cc:	8b 87       	std	Y+11, r24	; 0x0b
    23ce:	9c 87       	std	Y+12, r25	; 0x0c
    23d0:	ad 87       	std	Y+13, r26	; 0x0d
    23d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23da:	9e 85       	ldd	r25, Y+14	; 0x0e
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	4a ef       	ldi	r20, 0xFA	; 250
    23e2:	54 e4       	ldi	r21, 0x44	; 68
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8f 83       	std	Y+7, r24	; 0x07
    23ee:	98 87       	std	Y+8, r25	; 0x08
    23f0:	a9 87       	std	Y+9, r26	; 0x09
    23f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23f4:	6f 81       	ldd	r22, Y+7	; 0x07
    23f6:	78 85       	ldd	r23, Y+8	; 0x08
    23f8:	89 85       	ldd	r24, Y+9	; 0x09
    23fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2408:	88 23       	and	r24, r24
    240a:	2c f4       	brge	.+10     	; 0x2416 <LCD_vidWriteCommand+0x8e>
		__ticks = 1;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
    2414:	3f c0       	rjmp	.+126    	; 0x2494 <LCD_vidWriteCommand+0x10c>
	else if (__tmp > 65535)
    2416:	6f 81       	ldd	r22, Y+7	; 0x07
    2418:	78 85       	ldd	r23, Y+8	; 0x08
    241a:	89 85       	ldd	r24, Y+9	; 0x09
    241c:	9a 85       	ldd	r25, Y+10	; 0x0a
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	3f ef       	ldi	r19, 0xFF	; 255
    2422:	4f e7       	ldi	r20, 0x7F	; 127
    2424:	57 e4       	ldi	r21, 0x47	; 71
    2426:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    242a:	18 16       	cp	r1, r24
    242c:	4c f5       	brge	.+82     	; 0x2480 <LCD_vidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2430:	7c 85       	ldd	r23, Y+12	; 0x0c
    2432:	8d 85       	ldd	r24, Y+13	; 0x0d
    2434:	9e 85       	ldd	r25, Y+14	; 0x0e
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e2       	ldi	r20, 0x20	; 32
    243c:	51 e4       	ldi	r21, 0x41	; 65
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	0f c0       	rjmp	.+30     	; 0x2476 <LCD_vidWriteCommand+0xee>
    2458:	88 ec       	ldi	r24, 0xC8	; 200
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9c 83       	std	Y+4, r25	; 0x04
    245e:	8b 83       	std	Y+3, r24	; 0x03
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <LCD_vidWriteCommand+0xdc>
    2468:	9c 83       	std	Y+4, r25	; 0x04
    246a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246c:	8d 81       	ldd	r24, Y+5	; 0x05
    246e:	9e 81       	ldd	r25, Y+6	; 0x06
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	9e 83       	std	Y+6, r25	; 0x06
    2474:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	69 f7       	brne	.-38     	; 0x2458 <LCD_vidWriteCommand+0xd0>
    247e:	14 c0       	rjmp	.+40     	; 0x24a8 <LCD_vidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2480:	6f 81       	ldd	r22, Y+7	; 0x07
    2482:	78 85       	ldd	r23, Y+8	; 0x08
    2484:	89 85       	ldd	r24, Y+9	; 0x09
    2486:	9a 85       	ldd	r25, Y+10	; 0x0a
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	8d 81       	ldd	r24, Y+5	; 0x05
    2496:	9e 81       	ldd	r25, Y+6	; 0x06
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	9a 81       	ldd	r25, Y+2	; 0x02
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <LCD_vidWriteCommand+0x118>
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_u8CONTROL_PORT,LCD_u8EN_PIN,DIO_enuLow);
    24a8:	83 e0       	ldi	r24, 0x03	; 3
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
	return;
}
    24b2:	2f 96       	adiw	r28, 0x0f	; 15
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <LCD_vidWriteData>:
 * Output: Void
 *
 */

void LCD_vidWriteData(u8 COPY_u8Data)
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	2f 97       	sbiw	r28, 0x0f	; 15
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	8f 87       	std	Y+15, r24	; 0x0f

	//DIO_u8SetPinValue(LCD_u8CONTROL_PORT,LCD_u8EN_PIN,DIO_enuLow);
	DIO_u8SetPinValue(LCD_u8CONTROL_PORT,LCD_u8RS_PIN,DIO_enuHigh);
    24da:	83 e0       	ldi	r24, 0x03	; 3
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8CONTROL_PORT,LCD_u8RW_PIN,DIO_enuLow);
    24e4:	83 e0       	ldi	r24, 0x03	; 3
    24e6:	62 e0       	ldi	r22, 0x02	; 2
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_u8DATA_PORT,COPY_u8Data);
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    24f2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_u8CONTROL_PORT,LCD_u8EN_PIN,DIO_enuHigh);
    24f6:	83 e0       	ldi	r24, 0x03	; 3
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	41 e0       	ldi	r20, 0x01	; 1
    24fc:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	a0 e0       	ldi	r26, 0x00	; 0
    2506:	b0 e4       	ldi	r27, 0x40	; 64
    2508:	8b 87       	std	Y+11, r24	; 0x0b
    250a:	9c 87       	std	Y+12, r25	; 0x0c
    250c:	ad 87       	std	Y+13, r26	; 0x0d
    250e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2510:	6b 85       	ldd	r22, Y+11	; 0x0b
    2512:	7c 85       	ldd	r23, Y+12	; 0x0c
    2514:	8d 85       	ldd	r24, Y+13	; 0x0d
    2516:	9e 85       	ldd	r25, Y+14	; 0x0e
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a ef       	ldi	r20, 0xFA	; 250
    251e:	54 e4       	ldi	r21, 0x44	; 68
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	8f 83       	std	Y+7, r24	; 0x07
    252a:	98 87       	std	Y+8, r25	; 0x08
    252c:	a9 87       	std	Y+9, r26	; 0x09
    252e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2530:	6f 81       	ldd	r22, Y+7	; 0x07
    2532:	78 85       	ldd	r23, Y+8	; 0x08
    2534:	89 85       	ldd	r24, Y+9	; 0x09
    2536:	9a 85       	ldd	r25, Y+10	; 0x0a
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e8       	ldi	r20, 0x80	; 128
    253e:	5f e3       	ldi	r21, 0x3F	; 63
    2540:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2544:	88 23       	and	r24, r24
    2546:	2c f4       	brge	.+10     	; 0x2552 <LCD_vidWriteData+0x8e>
		__ticks = 1;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
    2550:	3f c0       	rjmp	.+126    	; 0x25d0 <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
    2552:	6f 81       	ldd	r22, Y+7	; 0x07
    2554:	78 85       	ldd	r23, Y+8	; 0x08
    2556:	89 85       	ldd	r24, Y+9	; 0x09
    2558:	9a 85       	ldd	r25, Y+10	; 0x0a
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	3f ef       	ldi	r19, 0xFF	; 255
    255e:	4f e7       	ldi	r20, 0x7F	; 127
    2560:	57 e4       	ldi	r21, 0x47	; 71
    2562:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2566:	18 16       	cp	r1, r24
    2568:	4c f5       	brge	.+82     	; 0x25bc <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256a:	6b 85       	ldd	r22, Y+11	; 0x0b
    256c:	7c 85       	ldd	r23, Y+12	; 0x0c
    256e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2570:	9e 85       	ldd	r25, Y+14	; 0x0e
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e2       	ldi	r20, 0x20	; 32
    2578:	51 e4       	ldi	r21, 0x41	; 65
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9e 83       	std	Y+6, r25	; 0x06
    2590:	8d 83       	std	Y+5, r24	; 0x05
    2592:	0f c0       	rjmp	.+30     	; 0x25b2 <LCD_vidWriteData+0xee>
    2594:	88 ec       	ldi	r24, 0xC8	; 200
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9c 83       	std	Y+4, r25	; 0x04
    259a:	8b 83       	std	Y+3, r24	; 0x03
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	9c 81       	ldd	r25, Y+4	; 0x04
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_vidWriteData+0xdc>
    25a4:	9c 83       	std	Y+4, r25	; 0x04
    25a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	9e 81       	ldd	r25, Y+6	; 0x06
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	9e 83       	std	Y+6, r25	; 0x06
    25b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b2:	8d 81       	ldd	r24, Y+5	; 0x05
    25b4:	9e 81       	ldd	r25, Y+6	; 0x06
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	69 f7       	brne	.-38     	; 0x2594 <LCD_vidWriteData+0xd0>
    25ba:	14 c0       	rjmp	.+40     	; 0x25e4 <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25bc:	6f 81       	ldd	r22, Y+7	; 0x07
    25be:	78 85       	ldd	r23, Y+8	; 0x08
    25c0:	89 85       	ldd	r24, Y+9	; 0x09
    25c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	8d 83       	std	Y+5, r24	; 0x05
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_vidWriteData+0x118>
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_u8CONTROL_PORT,LCD_u8EN_PIN,DIO_enuLow);
    25e4:	83 e0       	ldi	r24, 0x03	; 3
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>

	return;
}
    25ee:	2f 96       	adiw	r28, 0x0f	; 15
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <LCD_vidWriteString>:
 *
 */


void LCD_vidWriteString(u8* COPY_au8String)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	00 d0       	rcall	.+0      	; 0x2606 <LCD_vidWriteString+0x6>
    2606:	0f 92       	push	r0
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	9b 83       	std	Y+3, r25	; 0x03
    260e:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Counter=0;
    2610:	19 82       	std	Y+1, r1	; 0x01
    2612:	0e c0       	rjmp	.+28     	; 0x2630 <LCD_vidWriteString+0x30>
	while(COPY_au8String[LOC_u8Counter]!='\0')
	{
		LCD_vidWriteData(COPY_au8String[LOC_u8Counter]);
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	9b 81       	ldd	r25, Y+3	; 0x03
    261e:	fc 01       	movw	r30, r24
    2620:	e2 0f       	add	r30, r18
    2622:	f3 1f       	adc	r31, r19
    2624:	80 81       	ld	r24, Z
    2626:	0e 94 62 12 	call	0x24c4	; 0x24c4 <LCD_vidWriteData>
		LOC_u8Counter++;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	8f 5f       	subi	r24, 0xFF	; 255
    262e:	89 83       	std	Y+1, r24	; 0x01


void LCD_vidWriteString(u8* COPY_au8String)
{
	u8 LOC_u8Counter=0;
	while(COPY_au8String[LOC_u8Counter]!='\0')
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	9b 81       	ldd	r25, Y+3	; 0x03
    263a:	fc 01       	movw	r30, r24
    263c:	e2 0f       	add	r30, r18
    263e:	f3 1f       	adc	r31, r19
    2640:	80 81       	ld	r24, Z
    2642:	88 23       	and	r24, r24
    2644:	39 f7       	brne	.-50     	; 0x2614 <LCD_vidWriteString+0x14>
		LCD_vidWriteData(COPY_au8String[LOC_u8Counter]);
		LOC_u8Counter++;
	}

	return;
}
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <LCD_vidIntToString>:

void LCD_vidIntToString(u32 COPY_u8Integar , u8* COPY_pu8String)
{
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	2c 97       	sbiw	r28, 0x0c	; 12
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	6f 83       	std	Y+7, r22	; 0x07
    266c:	78 87       	std	Y+8, r23	; 0x08
    266e:	89 87       	std	Y+9, r24	; 0x09
    2670:	9a 87       	std	Y+10, r25	; 0x0a
    2672:	5c 87       	std	Y+12, r21	; 0x0c
    2674:	4b 87       	std	Y+11, r20	; 0x0b
	u32 LOC_u8Num=COPY_u8Integar;
    2676:	8f 81       	ldd	r24, Y+7	; 0x07
    2678:	98 85       	ldd	r25, Y+8	; 0x08
    267a:	a9 85       	ldd	r26, Y+9	; 0x09
    267c:	ba 85       	ldd	r27, Y+10	; 0x0a
    267e:	8b 83       	std	Y+3, r24	; 0x03
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	ad 83       	std	Y+5, r26	; 0x05
    2684:	be 83       	std	Y+6, r27	; 0x06
	u8 LOC_u8Size=0;
    2686:	1a 82       	std	Y+2, r1	; 0x02
    2688:	15 c0       	rjmp	.+42     	; 0x26b4 <LCD_vidIntToString+0x62>
	while(LOC_u8Num>0)
	{
		LOC_u8Size++;
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	8f 5f       	subi	r24, 0xFF	; 255
    268e:	8a 83       	std	Y+2, r24	; 0x02
		LOC_u8Num/=10;
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	9c 81       	ldd	r25, Y+4	; 0x04
    2694:	ad 81       	ldd	r26, Y+5	; 0x05
    2696:	be 81       	ldd	r27, Y+6	; 0x06
    2698:	2a e0       	ldi	r18, 0x0A	; 10
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e0       	ldi	r20, 0x00	; 0
    269e:	50 e0       	ldi	r21, 0x00	; 0
    26a0:	bc 01       	movw	r22, r24
    26a2:	cd 01       	movw	r24, r26
    26a4:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodsi4>
    26a8:	da 01       	movw	r26, r20
    26aa:	c9 01       	movw	r24, r18
    26ac:	8b 83       	std	Y+3, r24	; 0x03
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	ad 83       	std	Y+5, r26	; 0x05
    26b2:	be 83       	std	Y+6, r27	; 0x06

void LCD_vidIntToString(u32 COPY_u8Integar , u8* COPY_pu8String)
{
	u32 LOC_u8Num=COPY_u8Integar;
	u8 LOC_u8Size=0;
	while(LOC_u8Num>0)
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	ad 81       	ldd	r26, Y+5	; 0x05
    26ba:	be 81       	ldd	r27, Y+6	; 0x06
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	a1 05       	cpc	r26, r1
    26c0:	b1 05       	cpc	r27, r1
    26c2:	19 f7       	brne	.-58     	; 0x268a <LCD_vidIntToString+0x38>
	{
		LOC_u8Size++;
		LOC_u8Num/=10;
	}
	for(u8 i=0;i<LOC_u8Size;i++)
    26c4:	19 82       	std	Y+1, r1	; 0x01
    26c6:	39 c0       	rjmp	.+114    	; 0x273a <LCD_vidIntToString+0xe8>
	{
		COPY_pu8String[(LOC_u8Size-1)-i]=( COPY_u8Integar %10 ) +'0';
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9c 01       	movw	r18, r24
    26d0:	21 50       	subi	r18, 0x01	; 1
    26d2:	30 40       	sbci	r19, 0x00	; 0
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	88 2f       	mov	r24, r24
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a9 01       	movw	r20, r18
    26dc:	48 1b       	sub	r20, r24
    26de:	59 0b       	sbc	r21, r25
    26e0:	ca 01       	movw	r24, r20
    26e2:	9c 01       	movw	r18, r24
    26e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    26e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    26e8:	8c 01       	movw	r16, r24
    26ea:	02 0f       	add	r16, r18
    26ec:	13 1f       	adc	r17, r19
    26ee:	8f 81       	ldd	r24, Y+7	; 0x07
    26f0:	98 85       	ldd	r25, Y+8	; 0x08
    26f2:	a9 85       	ldd	r26, Y+9	; 0x09
    26f4:	ba 85       	ldd	r27, Y+10	; 0x0a
    26f6:	2a e0       	ldi	r18, 0x0A	; 10
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	bc 01       	movw	r22, r24
    2700:	cd 01       	movw	r24, r26
    2702:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodsi4>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	80 5d       	subi	r24, 0xD0	; 208
    270c:	f8 01       	movw	r30, r16
    270e:	80 83       	st	Z, r24
		COPY_u8Integar/=10;
    2710:	8f 81       	ldd	r24, Y+7	; 0x07
    2712:	98 85       	ldd	r25, Y+8	; 0x08
    2714:	a9 85       	ldd	r26, Y+9	; 0x09
    2716:	ba 85       	ldd	r27, Y+10	; 0x0a
    2718:	2a e0       	ldi	r18, 0x0A	; 10
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodsi4>
    2728:	da 01       	movw	r26, r20
    272a:	c9 01       	movw	r24, r18
    272c:	8f 83       	std	Y+7, r24	; 0x07
    272e:	98 87       	std	Y+8, r25	; 0x08
    2730:	a9 87       	std	Y+9, r26	; 0x09
    2732:	ba 87       	std	Y+10, r27	; 0x0a
	while(LOC_u8Num>0)
	{
		LOC_u8Size++;
		LOC_u8Num/=10;
	}
	for(u8 i=0;i<LOC_u8Size;i++)
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	8f 5f       	subi	r24, 0xFF	; 255
    2738:	89 83       	std	Y+1, r24	; 0x01
    273a:	99 81       	ldd	r25, Y+1	; 0x01
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	98 17       	cp	r25, r24
    2740:	18 f2       	brcs	.-122    	; 0x26c8 <LCD_vidIntToString+0x76>
	{
		COPY_pu8String[(LOC_u8Size-1)-i]=( COPY_u8Integar %10 ) +'0';
		COPY_u8Integar/=10;
	}
	COPY_pu8String[LOC_u8Size]='\0';
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	8b 85       	ldd	r24, Y+11	; 0x0b
    274a:	9c 85       	ldd	r25, Y+12	; 0x0c
    274c:	fc 01       	movw	r30, r24
    274e:	e2 0f       	add	r30, r18
    2750:	f3 1f       	adc	r31, r19
    2752:	10 82       	st	Z, r1

	return;
}
    2754:	2c 96       	adiw	r28, 0x0c	; 12
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	08 95       	ret

0000276a <LCD_vidGoTo_XY>:
 * colum
 * output: void
 */

void LCD_vidGoTo_XY(u8 COPY_u8Row , u8 COPY_u8Column )
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	6c 97       	sbiw	r28, 0x1c	; 28
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	8b 8f       	std	Y+27, r24	; 0x1b
    2780:	6c 8f       	std	Y+28, r22	; 0x1c

u8 LOC_au8FirstCharAdd[]={0x80,0xC0};
    2782:	80 e8       	ldi	r24, 0x80	; 128
    2784:	89 8f       	std	Y+25, r24	; 0x19
    2786:	80 ec       	ldi	r24, 0xC0	; 192
    2788:	8a 8f       	std	Y+26, r24	; 0x1a
LCD_vidWriteCommand(LOC_au8FirstCharAdd[COPY_u8Row-1] + COPY_u8Column-1);
    278a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9c 01       	movw	r18, r24
    2792:	21 50       	subi	r18, 0x01	; 1
    2794:	30 40       	sbci	r19, 0x00	; 0
    2796:	ce 01       	movw	r24, r28
    2798:	49 96       	adiw	r24, 0x19	; 25
    279a:	fc 01       	movw	r30, r24
    279c:	e2 0f       	add	r30, r18
    279e:	f3 1f       	adc	r31, r19
    27a0:	90 81       	ld	r25, Z
    27a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27a4:	89 0f       	add	r24, r25
    27a6:	81 50       	subi	r24, 0x01	; 1
    27a8:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	a8 ec       	ldi	r26, 0xC8	; 200
    27b2:	b2 e4       	ldi	r27, 0x42	; 66
    27b4:	8d 8b       	std	Y+21, r24	; 0x15
    27b6:	9e 8b       	std	Y+22, r25	; 0x16
    27b8:	af 8b       	std	Y+23, r26	; 0x17
    27ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27bc:	6d 89       	ldd	r22, Y+21	; 0x15
    27be:	7e 89       	ldd	r23, Y+22	; 0x16
    27c0:	8f 89       	ldd	r24, Y+23	; 0x17
    27c2:	98 8d       	ldd	r25, Y+24	; 0x18
    27c4:	2b ea       	ldi	r18, 0xAB	; 171
    27c6:	3a ea       	ldi	r19, 0xAA	; 170
    27c8:	4a e2       	ldi	r20, 0x2A	; 42
    27ca:	50 e4       	ldi	r21, 0x40	; 64
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	89 8b       	std	Y+17, r24	; 0x11
    27d6:	9a 8b       	std	Y+18, r25	; 0x12
    27d8:	ab 8b       	std	Y+19, r26	; 0x13
    27da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27dc:	69 89       	ldd	r22, Y+17	; 0x11
    27de:	7a 89       	ldd	r23, Y+18	; 0x12
    27e0:	8b 89       	ldd	r24, Y+19	; 0x13
    27e2:	9c 89       	ldd	r25, Y+20	; 0x14
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e8       	ldi	r20, 0x80	; 128
    27ea:	5f e3       	ldi	r21, 0x3F	; 63
    27ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27f0:	88 23       	and	r24, r24
    27f2:	1c f4       	brge	.+6      	; 0x27fa <LCD_vidGoTo_XY+0x90>
		__ticks = 1;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	88 8b       	std	Y+16, r24	; 0x10
    27f8:	91 c0       	rjmp	.+290    	; 0x291c <LCD_vidGoTo_XY+0x1b2>
	else if (__tmp > 255)
    27fa:	69 89       	ldd	r22, Y+17	; 0x11
    27fc:	7a 89       	ldd	r23, Y+18	; 0x12
    27fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2800:	9c 89       	ldd	r25, Y+20	; 0x14
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4f e7       	ldi	r20, 0x7F	; 127
    2808:	53 e4       	ldi	r21, 0x43	; 67
    280a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    280e:	18 16       	cp	r1, r24
    2810:	0c f0       	brlt	.+2      	; 0x2814 <LCD_vidGoTo_XY+0xaa>
    2812:	7b c0       	rjmp	.+246    	; 0x290a <LCD_vidGoTo_XY+0x1a0>
	{
		_delay_ms(__us / 1000.0);
    2814:	6d 89       	ldd	r22, Y+21	; 0x15
    2816:	7e 89       	ldd	r23, Y+22	; 0x16
    2818:	8f 89       	ldd	r24, Y+23	; 0x17
    281a:	98 8d       	ldd	r25, Y+24	; 0x18
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	4a e7       	ldi	r20, 0x7A	; 122
    2822:	54 e4       	ldi	r21, 0x44	; 68
    2824:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	8c 87       	std	Y+12, r24	; 0x0c
    282e:	9d 87       	std	Y+13, r25	; 0x0d
    2830:	ae 87       	std	Y+14, r26	; 0x0e
    2832:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2834:	6c 85       	ldd	r22, Y+12	; 0x0c
    2836:	7d 85       	ldd	r23, Y+13	; 0x0d
    2838:	8e 85       	ldd	r24, Y+14	; 0x0e
    283a:	9f 85       	ldd	r25, Y+15	; 0x0f
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	4a ef       	ldi	r20, 0xFA	; 250
    2842:	54 e4       	ldi	r21, 0x44	; 68
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	88 87       	std	Y+8, r24	; 0x08
    284e:	99 87       	std	Y+9, r25	; 0x09
    2850:	aa 87       	std	Y+10, r26	; 0x0a
    2852:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2854:	68 85       	ldd	r22, Y+8	; 0x08
    2856:	79 85       	ldd	r23, Y+9	; 0x09
    2858:	8a 85       	ldd	r24, Y+10	; 0x0a
    285a:	9b 85       	ldd	r25, Y+11	; 0x0b
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e8       	ldi	r20, 0x80	; 128
    2862:	5f e3       	ldi	r21, 0x3F	; 63
    2864:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2868:	88 23       	and	r24, r24
    286a:	2c f4       	brge	.+10     	; 0x2876 <LCD_vidGoTo_XY+0x10c>
		__ticks = 1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9f 83       	std	Y+7, r25	; 0x07
    2872:	8e 83       	std	Y+6, r24	; 0x06
    2874:	3f c0       	rjmp	.+126    	; 0x28f4 <LCD_vidGoTo_XY+0x18a>
	else if (__tmp > 65535)
    2876:	68 85       	ldd	r22, Y+8	; 0x08
    2878:	79 85       	ldd	r23, Y+9	; 0x09
    287a:	8a 85       	ldd	r24, Y+10	; 0x0a
    287c:	9b 85       	ldd	r25, Y+11	; 0x0b
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	3f ef       	ldi	r19, 0xFF	; 255
    2882:	4f e7       	ldi	r20, 0x7F	; 127
    2884:	57 e4       	ldi	r21, 0x47	; 71
    2886:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    288a:	18 16       	cp	r1, r24
    288c:	4c f5       	brge	.+82     	; 0x28e0 <LCD_vidGoTo_XY+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2890:	7d 85       	ldd	r23, Y+13	; 0x0d
    2892:	8e 85       	ldd	r24, Y+14	; 0x0e
    2894:	9f 85       	ldd	r25, Y+15	; 0x0f
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e2       	ldi	r20, 0x20	; 32
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9f 83       	std	Y+7, r25	; 0x07
    28b4:	8e 83       	std	Y+6, r24	; 0x06
    28b6:	0f c0       	rjmp	.+30     	; 0x28d6 <LCD_vidGoTo_XY+0x16c>
    28b8:	88 ec       	ldi	r24, 0xC8	; 200
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	9d 83       	std	Y+5, r25	; 0x05
    28be:	8c 83       	std	Y+4, r24	; 0x04
    28c0:	8c 81       	ldd	r24, Y+4	; 0x04
    28c2:	9d 81       	ldd	r25, Y+5	; 0x05
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <LCD_vidGoTo_XY+0x15a>
    28c8:	9d 83       	std	Y+5, r25	; 0x05
    28ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28cc:	8e 81       	ldd	r24, Y+6	; 0x06
    28ce:	9f 81       	ldd	r25, Y+7	; 0x07
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	9f 83       	std	Y+7, r25	; 0x07
    28d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d6:	8e 81       	ldd	r24, Y+6	; 0x06
    28d8:	9f 81       	ldd	r25, Y+7	; 0x07
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	69 f7       	brne	.-38     	; 0x28b8 <LCD_vidGoTo_XY+0x14e>
    28de:	24 c0       	rjmp	.+72     	; 0x2928 <LCD_vidGoTo_XY+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e0:	68 85       	ldd	r22, Y+8	; 0x08
    28e2:	79 85       	ldd	r23, Y+9	; 0x09
    28e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	9f 83       	std	Y+7, r25	; 0x07
    28f2:	8e 83       	std	Y+6, r24	; 0x06
    28f4:	8e 81       	ldd	r24, Y+6	; 0x06
    28f6:	9f 81       	ldd	r25, Y+7	; 0x07
    28f8:	9b 83       	std	Y+3, r25	; 0x03
    28fa:	8a 83       	std	Y+2, r24	; 0x02
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <LCD_vidGoTo_XY+0x196>
    2904:	9b 83       	std	Y+3, r25	; 0x03
    2906:	8a 83       	std	Y+2, r24	; 0x02
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <LCD_vidGoTo_XY+0x1be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    290a:	69 89       	ldd	r22, Y+17	; 0x11
    290c:	7a 89       	ldd	r23, Y+18	; 0x12
    290e:	8b 89       	ldd	r24, Y+19	; 0x13
    2910:	9c 89       	ldd	r25, Y+20	; 0x14
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	88 8b       	std	Y+16, r24	; 0x10
    291c:	88 89       	ldd	r24, Y+16	; 0x10
    291e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	8a 95       	dec	r24
    2924:	f1 f7       	brne	.-4      	; 0x2922 <LCD_vidGoTo_XY+0x1b8>
    2926:	89 83       	std	Y+1, r24	; 0x01
_delay_us(100);
}
    2928:	6c 96       	adiw	r28, 0x1c	; 28
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <LDR_vidInit>:
 * Output: None
 *
 */

void LDR_vidInit()
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
//	if(			)		;//setting Channel as Input

			DIO_u8SetPinDirection(DIO_enuPORTA,LDR_u8CHANNEL_NUM,DIO_enuInput);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	61 e0       	ldi	r22, 0x01	; 1
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	0e 94 30 07 	call	0xe60	; 0xe60 <DIO_u8SetPinDirection>
//	{
		ADC_vidInit();		//Init ADC
    294c:	0e 94 96 06 	call	0xd2c	; 0xd2c <ADC_vidInit>
//	}

	return;
}
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <LDR_u8GetValue>:
 * Input : Channel, Pointer to LevelValue (in scale 5)
 * Output: Error state
 */

u8 LDR_u8GetValue(u8 COPY_u8Channel,u32* COPY_u8LevelValue)
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	00 d0       	rcall	.+0      	; 0x295c <LDR_u8GetValue+0x6>
    295c:	00 d0       	rcall	.+0      	; 0x295e <LDR_u8GetValue+0x8>
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	8a 83       	std	Y+2, r24	; 0x02
    2964:	7c 83       	std	Y+4, r23	; 0x04
    2966:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8Err=0;
    2968:	19 82       	std	Y+1, r1	; 0x01
	LOC_u8Err=ADC_u8GetAdcReading(COPY_u8Channel,COPY_u8LevelValue);
    296a:	2b 81       	ldd	r18, Y+3	; 0x03
    296c:	3c 81       	ldd	r19, Y+4	; 0x04
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	b9 01       	movw	r22, r18
    2972:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <ADC_u8GetAdcReading>
    2976:	89 83       	std	Y+1, r24	; 0x01
	(*COPY_u8LevelValue) =(*COPY_u8LevelValue)*5/ADC_RES_NUM;
    2978:	eb 81       	ldd	r30, Y+3	; 0x03
    297a:	fc 81       	ldd	r31, Y+4	; 0x04
    297c:	20 81       	ld	r18, Z
    297e:	31 81       	ldd	r19, Z+1	; 0x01
    2980:	42 81       	ldd	r20, Z+2	; 0x02
    2982:	53 81       	ldd	r21, Z+3	; 0x03
    2984:	da 01       	movw	r26, r20
    2986:	c9 01       	movw	r24, r18
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	aa 1f       	adc	r26, r26
    298e:	bb 1f       	adc	r27, r27
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	aa 1f       	adc	r26, r26
    2996:	bb 1f       	adc	r27, r27
    2998:	82 0f       	add	r24, r18
    299a:	93 1f       	adc	r25, r19
    299c:	a4 1f       	adc	r26, r20
    299e:	b5 1f       	adc	r27, r21
    29a0:	89 2f       	mov	r24, r25
    29a2:	9a 2f       	mov	r25, r26
    29a4:	ab 2f       	mov	r26, r27
    29a6:	bb 27       	eor	r27, r27
    29a8:	eb 81       	ldd	r30, Y+3	; 0x03
    29aa:	fc 81       	ldd	r31, Y+4	; 0x04
    29ac:	80 83       	st	Z, r24
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	a2 83       	std	Z+2, r26	; 0x02
    29b2:	b3 83       	std	Z+3, r27	; 0x03
	(*COPY_u8LevelValue)+=1;
    29b4:	eb 81       	ldd	r30, Y+3	; 0x03
    29b6:	fc 81       	ldd	r31, Y+4	; 0x04
    29b8:	80 81       	ld	r24, Z
    29ba:	91 81       	ldd	r25, Z+1	; 0x01
    29bc:	a2 81       	ldd	r26, Z+2	; 0x02
    29be:	b3 81       	ldd	r27, Z+3	; 0x03
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	a1 1d       	adc	r26, r1
    29c4:	b1 1d       	adc	r27, r1
    29c6:	eb 81       	ldd	r30, Y+3	; 0x03
    29c8:	fc 81       	ldd	r31, Y+4	; 0x04
    29ca:	80 83       	st	Z, r24
    29cc:	91 83       	std	Z+1, r25	; 0x01
    29ce:	a2 83       	std	Z+2, r26	; 0x02
    29d0:	b3 83       	std	Z+3, r27	; 0x03
	return LOC_u8Err;
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <LDR_vidDisplayOnLCD>:
 * Input void
 * Output void
 *
 */
void LDR_vidDisplayOnLCD(void)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <LDR_vidDisplayOnLCD+0x6>
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <LDR_vidDisplayOnLCD+0x8>
    29ea:	0f 92       	push	r0
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8String[5];
//	LCD_vidWriteCommand(LCD_);
//	LCD_vidGoTo_XY(1,1);
	LDR_u8GetValue(LDR_u8CHANNEL_NUM,&au32_ChannelValues[LDR_u8CHANNEL_NUM]);
    29f0:	24 eb       	ldi	r18, 0xB4	; 180
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	b9 01       	movw	r22, r18
    29f8:	0e 94 ab 14 	call	0x2956	; 0x2956 <LDR_u8GetValue>
	LCD_vidIntToString(au32_ChannelValues[LDR_u8CHANNEL_NUM],LOC_u8String);
    29fc:	80 91 b4 00 	lds	r24, 0x00B4
    2a00:	90 91 b5 00 	lds	r25, 0x00B5
    2a04:	a0 91 b6 00 	lds	r26, 0x00B6
    2a08:	b0 91 b7 00 	lds	r27, 0x00B7
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	9e 01       	movw	r18, r28
    2a12:	2f 5f       	subi	r18, 0xFF	; 255
    2a14:	3f 4f       	sbci	r19, 0xFF	; 255
    2a16:	a9 01       	movw	r20, r18
    2a18:	0e 94 29 13 	call	0x2652	; 0x2652 <LCD_vidIntToString>
	LCD_vidWriteString(LOC_u8String);
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_vidWriteString>
	LCD_vidWriteData(' ');
    2a24:	80 e2       	ldi	r24, 0x20	; 32
    2a26:	0e 94 62 12 	call	0x24c4	; 0x24c4 <LCD_vidWriteData>
	return;
}
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <main>:
volatile u8 FLAG=0;

volatile u8 channel=0;
extern u8 ADC_Flag;
void main(void)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	6c 97       	sbiw	r28, 0x1c	; 28
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61

	DIO_u8SetPinDirection(DIO_enuPORTA,DIO_enuPIN2,DIO_enuOutput);
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	62 e0       	ldi	r22, 0x02	; 2
    2a52:	41 e0       	ldi	r20, 0x01	; 1
    2a54:	0e 94 30 07 	call	0xe60	; 0xe60 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_enuPORTA,DIO_enuPIN3,DIO_enuOutput);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	63 e0       	ldi	r22, 0x03	; 3
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	0e 94 30 07 	call	0xe60	; 0xe60 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_enuPORTB,DIO_enuPIN7,DIO_enuOutput);
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	67 e0       	ldi	r22, 0x07	; 7
    2a66:	41 e0       	ldi	r20, 0x01	; 1
    2a68:	0e 94 30 07 	call	0xe60	; 0xe60 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_enuPORTA,DIO_enuPIN2,DIO_enuLow);
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	62 e0       	ldi	r22, 0x02	; 2
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
//	DIO_u8SetPinValue(DIO_enuPORTB,DIO_enuPIN7,DIO_enuLow);


	u8 LOC_au8Password[4]={0};
    2a76:	1c 8a       	std	Y+20, r1	; 0x14
    2a78:	1d 8a       	std	Y+21, r1	; 0x15
    2a7a:	1e 8a       	std	Y+22, r1	; 0x16
    2a7c:	1f 8a       	std	Y+23, r1	; 0x17
	u8 LOC_au8RPAS[4]={1,2,3,4};
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	88 8f       	std	Y+24, r24	; 0x18
    2a82:	82 e0       	ldi	r24, 0x02	; 2
    2a84:	89 8f       	std	Y+25, r24	; 0x19
    2a86:	83 e0       	ldi	r24, 0x03	; 3
    2a88:	8a 8f       	std	Y+26, r24	; 0x1a
    2a8a:	84 e0       	ldi	r24, 0x04	; 4
    2a8c:	8b 8f       	std	Y+27, r24	; 0x1b
	u8 k=0;
    2a8e:	1b 8a       	std	Y+19, r1	; 0x13
	u8 flag=0;
    2a90:	1a 8a       	std	Y+18, r1	; 0x12

	u8 LOC_u8KeyPressed;
	u8* LOC_pu8String;
	KPD_vidInit();
    2a92:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <KPD_vidInit>
	INTP_vidInit();
    2a96:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <INTP_vidInit>
	LCD_vidInitialize();
    2a9a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <LCD_vidInitialize>
	LDR_vidInit();
    2a9e:	0e 94 9d 14 	call	0x293a	; 0x293a <LDR_vidInit>
	TEMP_vidInit();
    2aa2:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <TEMP_vidInit>

while(1)
{

	DIO_u8SetPinValue(DIO_enuPORTB,DIO_enuPIN7,DIO_enuLow);
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	67 e0       	ldi	r22, 0x07	; 7
    2aaa:	40 e0       	ldi	r20, 0x00	; 0
    2aac:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
    2ab0:	20 c1       	rjmp	.+576    	; 0x2cf2 <main+0x2b8>
	while(FLAG)
	{
		if(LOC_u8Trials<3)
    2ab2:	80 91 d0 00 	lds	r24, 0x00D0
    2ab6:	83 30       	cpi	r24, 0x03	; 3
    2ab8:	08 f0       	brcs	.+2      	; 0x2abc <main+0x82>
    2aba:	fe c0       	rjmp	.+508    	; 0x2cb8 <main+0x27e>
		{	KPD_vidGetKey(&LOC_u8KeyPressed);
    2abc:	ce 01       	movw	r24, r28
    2abe:	4c 96       	adiw	r24, 0x1c	; 28
    2ac0:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KPD_vidGetKey>
			if(LOC_u8KeyPressed!=0)
    2ac4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ac6:	88 23       	and	r24, r24
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <main+0x92>
    2aca:	13 c1       	rjmp	.+550    	; 0x2cf2 <main+0x2b8>
			{
				LOC_au8Password[k]=LOC_u8KeyPressed;
    2acc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ace:	28 2f       	mov	r18, r24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	44 96       	adiw	r24, 0x14	; 20
    2ad8:	fc 01       	movw	r30, r24
    2ada:	e2 0f       	add	r30, r18
    2adc:	f3 1f       	adc	r31, r19
    2ade:	40 83       	st	Z, r20
				LCD_vidIntToString(LOC_au8Password[k],LOC_pu8String);
    2ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	44 96       	adiw	r24, 0x14	; 20
    2aea:	fc 01       	movw	r30, r24
    2aec:	e2 0f       	add	r30, r18
    2aee:	f3 1f       	adc	r31, r19
    2af0:	80 81       	ld	r24, Z
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	a0 e0       	ldi	r26, 0x00	; 0
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	28 89       	ldd	r18, Y+16	; 0x10
    2afc:	39 89       	ldd	r19, Y+17	; 0x11
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	a9 01       	movw	r20, r18
    2b04:	0e 94 29 13 	call	0x2652	; 0x2652 <LCD_vidIntToString>
				LCD_vidWriteString(LOC_pu8String);
    2b08:	88 89       	ldd	r24, Y+16	; 0x10
    2b0a:	99 89       	ldd	r25, Y+17	; 0x11
    2b0c:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_vidWriteString>
				k++;
    2b10:	8b 89       	ldd	r24, Y+19	; 0x13
    2b12:	8f 5f       	subi	r24, 0xFF	; 255
    2b14:	8b 8b       	std	Y+19, r24	; 0x13
				if(k==4)
    2b16:	8b 89       	ldd	r24, Y+19	; 0x13
    2b18:	84 30       	cpi	r24, 0x04	; 4
    2b1a:	09 f0       	breq	.+2      	; 0x2b1e <main+0xe4>
    2b1c:	ea c0       	rjmp	.+468    	; 0x2cf2 <main+0x2b8>
				{
					for(u8 i=0;i<=3;i++)
    2b1e:	1f 86       	std	Y+15, r1	; 0x0f
    2b20:	1a c0       	rjmp	.+52     	; 0x2b56 <main+0x11c>
					{
						if(LOC_au8Password[i]==LOC_au8RPAS[i])
    2b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	ce 01       	movw	r24, r28
    2b2a:	44 96       	adiw	r24, 0x14	; 20
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	e2 0f       	add	r30, r18
    2b30:	f3 1f       	adc	r31, r19
    2b32:	40 81       	ld	r20, Z
    2b34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b36:	28 2f       	mov	r18, r24
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	48 96       	adiw	r24, 0x18	; 24
    2b3e:	fc 01       	movw	r30, r24
    2b40:	e2 0f       	add	r30, r18
    2b42:	f3 1f       	adc	r31, r19
    2b44:	80 81       	ld	r24, Z
    2b46:	48 17       	cp	r20, r24
    2b48:	19 f4       	brne	.+6      	; 0x2b50 <main+0x116>
							flag++;
    2b4a:	8a 89       	ldd	r24, Y+18	; 0x12
    2b4c:	8f 5f       	subi	r24, 0xFF	; 255
    2b4e:	8a 8b       	std	Y+18, r24	; 0x12
				LCD_vidIntToString(LOC_au8Password[k],LOC_pu8String);
				LCD_vidWriteString(LOC_pu8String);
				k++;
				if(k==4)
				{
					for(u8 i=0;i<=3;i++)
    2b50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b52:	8f 5f       	subi	r24, 0xFF	; 255
    2b54:	8f 87       	std	Y+15, r24	; 0x0f
    2b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b58:	84 30       	cpi	r24, 0x04	; 4
    2b5a:	18 f3       	brcs	.-58     	; 0x2b22 <main+0xe8>
					{
						if(LOC_au8Password[i]==LOC_au8RPAS[i])
							flag++;
					}
						if(flag==4)
    2b5c:	8a 89       	ldd	r24, Y+18	; 0x12
    2b5e:	84 30       	cpi	r24, 0x04	; 4
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <main+0x12a>
    2b62:	9f c0       	rjmp	.+318    	; 0x2ca2 <main+0x268>
							{
									LCD_vidWriteCommand(LCD_u8CLEAR_DISPLAY);
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>
									DIO_u8SetPinValue(DIO_enuPORTA,DIO_enuPIN3,DIO_enuHigh);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	63 e0       	ldi	r22, 0x03	; 3
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
									IntpCase=SHOME_NO_STATE;
    2b74:	10 92 ad 00 	sts	0x00AD, r1
									INTP_vidIntp2Enable();
    2b78:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <INTP_vidIntp2Enable>
									IntpCase=SHOME_OFF_STATE;
    2b7c:	82 e0       	ldi	r24, 0x02	; 2
    2b7e:	80 93 ad 00 	sts	0x00AD, r24
									DIO_u8SetPinValue(DIO_enuPORTB,DIO_enuPIN7,DIO_enuLow);
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	67 e0       	ldi	r22, 0x07	; 7
    2b86:	40 e0       	ldi	r20, 0x00	; 0
    2b88:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
									k=0;
    2b8c:	1b 8a       	std	Y+19, r1	; 0x13
									flag=0;
    2b8e:	1a 8a       	std	Y+18, r1	; 0x12
									DIO_u8SetPinValue(DIO_enuPORTB,DIO_enuPIN7,DIO_enuLow);
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	67 e0       	ldi	r22, 0x07	; 7
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
    2b9a:	7d c0       	rjmp	.+250    	; 0x2c96 <main+0x25c>
									while(IntpCase==SHOME_OFF_STATE)
									{
										LCD_vidGoTo_XY(1,1);
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	61 e0       	ldi	r22, 0x01	; 1
    2ba0:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_vidGoTo_XY>
										TEMP_vidDisplayOnLCD();
    2ba4:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <TEMP_vidDisplayOnLCD>
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	a8 e4       	ldi	r26, 0x48	; 72
    2bae:	b2 e4       	ldi	r27, 0x42	; 66
    2bb0:	8b 87       	std	Y+11, r24	; 0x0b
    2bb2:	9c 87       	std	Y+12, r25	; 0x0c
    2bb4:	ad 87       	std	Y+13, r26	; 0x0d
    2bb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	4a ef       	ldi	r20, 0xFA	; 250
    2bc6:	54 e4       	ldi	r21, 0x44	; 68
    2bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	8f 83       	std	Y+7, r24	; 0x07
    2bd2:	98 87       	std	Y+8, r25	; 0x08
    2bd4:	a9 87       	std	Y+9, r26	; 0x09
    2bd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bda:	78 85       	ldd	r23, Y+8	; 0x08
    2bdc:	89 85       	ldd	r24, Y+9	; 0x09
    2bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e8       	ldi	r20, 0x80	; 128
    2be6:	5f e3       	ldi	r21, 0x3F	; 63
    2be8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bec:	88 23       	and	r24, r24
    2bee:	2c f4       	brge	.+10     	; 0x2bfa <main+0x1c0>
		__ticks = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
    2bf8:	3f c0       	rjmp	.+126    	; 0x2c78 <main+0x23e>
	else if (__tmp > 65535)
    2bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfc:	78 85       	ldd	r23, Y+8	; 0x08
    2bfe:	89 85       	ldd	r24, Y+9	; 0x09
    2c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	3f ef       	ldi	r19, 0xFF	; 255
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	57 e4       	ldi	r21, 0x47	; 71
    2c0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	4c f5       	brge	.+82     	; 0x2c64 <main+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e2       	ldi	r20, 0x20	; 32
    2c20:	51 e4       	ldi	r21, 0x41	; 65
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <main+0x220>
    2c3c:	88 ec       	ldi	r24, 0xC8	; 200
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	9c 83       	std	Y+4, r25	; 0x04
    2c42:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	9c 81       	ldd	r25, Y+4	; 0x04
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <main+0x20e>
    2c4c:	9c 83       	std	Y+4, r25	; 0x04
    2c4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c50:	8d 81       	ldd	r24, Y+5	; 0x05
    2c52:	9e 81       	ldd	r25, Y+6	; 0x06
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	9e 83       	std	Y+6, r25	; 0x06
    2c58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	69 f7       	brne	.-38     	; 0x2c3c <main+0x202>
    2c62:	14 c0       	rjmp	.+40     	; 0x2c8c <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c64:	6f 81       	ldd	r22, Y+7	; 0x07
    2c66:	78 85       	ldd	r23, Y+8	; 0x08
    2c68:	89 85       	ldd	r24, Y+9	; 0x09
    2c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	9e 83       	std	Y+6, r25	; 0x06
    2c76:	8d 83       	std	Y+5, r24	; 0x05
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	9a 83       	std	Y+2, r25	; 0x02
    2c7e:	89 83       	std	Y+1, r24	; 0x01
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	9a 81       	ldd	r25, Y+2	; 0x02
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <main+0x24a>
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	89 83       	std	Y+1, r24	; 0x01
										_delay_ms(50);
										LCD_vidWriteData(' ');
    2c8c:	80 e2       	ldi	r24, 0x20	; 32
    2c8e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <LCD_vidWriteData>
//										channel=0;
										LDR_vidDisplayOnLCD();
    2c92:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <LDR_vidDisplayOnLCD>
									IntpCase=SHOME_OFF_STATE;
									DIO_u8SetPinValue(DIO_enuPORTB,DIO_enuPIN7,DIO_enuLow);
									k=0;
									flag=0;
									DIO_u8SetPinValue(DIO_enuPORTB,DIO_enuPIN7,DIO_enuLow);
									while(IntpCase==SHOME_OFF_STATE)
    2c96:	80 91 ad 00 	lds	r24, 0x00AD
    2c9a:	82 30       	cpi	r24, 0x02	; 2
    2c9c:	09 f4       	brne	.+2      	; 0x2ca0 <main+0x266>
    2c9e:	7e cf       	rjmp	.-260    	; 0x2b9c <main+0x162>
    2ca0:	28 c0       	rjmp	.+80     	; 0x2cf2 <main+0x2b8>
										LDR_vidDisplayOnLCD();

									}
							}else
							{
								LOC_u8Trials++;
    2ca2:	80 91 d0 00 	lds	r24, 0x00D0
    2ca6:	8f 5f       	subi	r24, 0xFF	; 255
    2ca8:	80 93 d0 00 	sts	0x00D0, r24
								k=0;
    2cac:	1b 8a       	std	Y+19, r1	; 0x13
								flag=0;
    2cae:	1a 8a       	std	Y+18, r1	; 0x12
								LCD_vidWriteCommand(LCD_u8CLEAR_DISPLAY);
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_vidWriteCommand>
    2cb6:	1d c0       	rjmp	.+58     	; 0x2cf2 <main+0x2b8>
				}

			}


		}else if (LOC_u8Trials>2)
    2cb8:	80 91 d0 00 	lds	r24, 0x00D0
    2cbc:	83 30       	cpi	r24, 0x03	; 3
    2cbe:	c8 f0       	brcs	.+50     	; 0x2cf2 <main+0x2b8>
		{
			IntpCase=SHOME_NO_STATE;
    2cc0:	10 92 ad 00 	sts	0x00AD, r1
			INTP_vidIntp2Enable();
    2cc4:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <INTP_vidIntp2Enable>
			IntpCase=SHOME_OFF_STATE;
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	80 93 ad 00 	sts	0x00AD, r24
			DIO_u8SetPinValue(DIO_enuPORTB,DIO_enuPIN7,DIO_enuLow);
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	67 e0       	ldi	r22, 0x07	; 7
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	0e 94 49 08 	call	0x1092	; 0x1092 <DIO_u8SetPinValue>
    2cd8:	08 c0       	rjmp	.+16     	; 0x2cea <main+0x2b0>
			while(IntpCase==SHOME_OFF_STATE)
			{
				LCD_vidGoTo_XY(1,1);
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	61 e0       	ldi	r22, 0x01	; 1
    2cde:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_vidGoTo_XY>
				LCD_vidWriteString("System is locked");
    2ce2:	84 e8       	ldi	r24, 0x84	; 132
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_vidWriteString>
		{
			IntpCase=SHOME_NO_STATE;
			INTP_vidIntp2Enable();
			IntpCase=SHOME_OFF_STATE;
			DIO_u8SetPinValue(DIO_enuPORTB,DIO_enuPIN7,DIO_enuLow);
			while(IntpCase==SHOME_OFF_STATE)
    2cea:	80 91 ad 00 	lds	r24, 0x00AD
    2cee:	82 30       	cpi	r24, 0x02	; 2
    2cf0:	a1 f3       	breq	.-24     	; 0x2cda <main+0x2a0>

while(1)
{

	DIO_u8SetPinValue(DIO_enuPORTB,DIO_enuPIN7,DIO_enuLow);
	while(FLAG)
    2cf2:	80 91 d1 00 	lds	r24, 0x00D1
    2cf6:	88 23       	and	r24, r24
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <main+0x2c2>
    2cfa:	db ce       	rjmp	.-586    	; 0x2ab2 <main+0x78>
    2cfc:	d4 ce       	rjmp	.-600    	; 0x2aa6 <main+0x6c>

00002cfe <TEMP_vidInit>:
 * Output: None
 *
 */

void TEMP_vidInit()
{
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
//	if(			)		;//setting Channel as Input

			DIO_u8SetPinDirection(ADC_PORT,TEMP_u8CHANNEL_NUM,DIO_enuInput);
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	0e 94 30 07 	call	0xe60	; 0xe60 <DIO_u8SetPinDirection>

//	{
		ADC_vidInit();		//Init ADC
    2d10:	0e 94 96 06 	call	0xd2c	; 0xd2c <ADC_vidInit>
//	}

	return;
}
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <TEMP_u8GetValue>:
 * Input : Channel, Pointer to Value
 * Output: Error state
 */

u8 TEMP_u8GetValue(u8 COPY_u8Channel,u32* COPY_u8LevelValue)
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <TEMP_u8GetValue+0x6>
    2d20:	00 d0       	rcall	.+0      	; 0x2d22 <TEMP_u8GetValue+0x8>
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	8a 83       	std	Y+2, r24	; 0x02
    2d28:	7c 83       	std	Y+4, r23	; 0x04
    2d2a:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8Err=0;
    2d2c:	19 82       	std	Y+1, r1	; 0x01
	LOC_u8Err=ADC_u8GetAdcReading(COPY_u8Channel,COPY_u8LevelValue);
    2d2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d30:	3c 81       	ldd	r19, Y+4	; 0x04
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	b9 01       	movw	r22, r18
    2d36:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <ADC_u8GetAdcReading>
    2d3a:	89 83       	std	Y+1, r24	; 0x01
	(*COPY_u8LevelValue) =(*COPY_u8LevelValue)*500/ADC_RES_NUM;
    2d3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	a2 81       	ldd	r26, Z+2	; 0x02
    2d46:	b3 81       	ldd	r27, Z+3	; 0x03
    2d48:	24 ef       	ldi	r18, 0xF4	; 244
    2d4a:	31 e0       	ldi	r19, 0x01	; 1
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	bc 01       	movw	r22, r24
    2d52:	cd 01       	movw	r24, r26
    2d54:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__mulsi3>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	89 2f       	mov	r24, r25
    2d5e:	9a 2f       	mov	r25, r26
    2d60:	ab 2f       	mov	r26, r27
    2d62:	bb 27       	eor	r27, r27
    2d64:	eb 81       	ldd	r30, Y+3	; 0x03
    2d66:	fc 81       	ldd	r31, Y+4	; 0x04
    2d68:	80 83       	st	Z, r24
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	a2 83       	std	Z+2, r26	; 0x02
    2d6e:	b3 83       	std	Z+3, r27	; 0x03
	return LOC_u8Err;
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <TEMP_vidDisplayOnLCD>:
 * Input void
 * Output void
 *
 */
void TEMP_vidDisplayOnLCD(void)
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <TEMP_vidDisplayOnLCD+0x6>
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <TEMP_vidDisplayOnLCD+0x8>
    2d88:	0f 92       	push	r0
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8String[5];
//	u8 LOC_var;
//	LCD_vidWriteCommand(LCD_);
//	LCD_vidGoTo_XY(1,1);
	TEMP_u8GetValue(TEMP_u8CHANNEL_NUM,&au32_ChannelValues[TEMP_u8CHANNEL_NUM]);
    2d8e:	20 eb       	ldi	r18, 0xB0	; 176
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	b9 01       	movw	r22, r18
    2d96:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <TEMP_u8GetValue>
	LCD_vidIntToString(au32_ChannelValues[TEMP_u8CHANNEL_NUM],LOC_u8String);
    2d9a:	80 91 b0 00 	lds	r24, 0x00B0
    2d9e:	90 91 b1 00 	lds	r25, 0x00B1
    2da2:	a0 91 b2 00 	lds	r26, 0x00B2
    2da6:	b0 91 b3 00 	lds	r27, 0x00B3
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	9e 01       	movw	r18, r28
    2db0:	2f 5f       	subi	r18, 0xFF	; 255
    2db2:	3f 4f       	sbci	r19, 0xFF	; 255
    2db4:	a9 01       	movw	r20, r18
    2db6:	0e 94 29 13 	call	0x2652	; 0x2652 <LCD_vidIntToString>
	LCD_vidWriteString(LOC_u8String);
    2dba:	ce 01       	movw	r24, r28
    2dbc:	01 96       	adiw	r24, 0x01	; 1
    2dbe:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_vidWriteString>
	LCD_vidWriteData(' ');
    2dc2:	80 e2       	ldi	r24, 0x20	; 32
    2dc4:	0e 94 62 12 	call	0x24c4	; 0x24c4 <LCD_vidWriteData>
	return;
}
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <__mulsi3>:
    2dd8:	62 9f       	mul	r22, r18
    2dda:	d0 01       	movw	r26, r0
    2ddc:	73 9f       	mul	r23, r19
    2dde:	f0 01       	movw	r30, r0
    2de0:	82 9f       	mul	r24, r18
    2de2:	e0 0d       	add	r30, r0
    2de4:	f1 1d       	adc	r31, r1
    2de6:	64 9f       	mul	r22, r20
    2de8:	e0 0d       	add	r30, r0
    2dea:	f1 1d       	adc	r31, r1
    2dec:	92 9f       	mul	r25, r18
    2dee:	f0 0d       	add	r31, r0
    2df0:	83 9f       	mul	r24, r19
    2df2:	f0 0d       	add	r31, r0
    2df4:	74 9f       	mul	r23, r20
    2df6:	f0 0d       	add	r31, r0
    2df8:	65 9f       	mul	r22, r21
    2dfa:	f0 0d       	add	r31, r0
    2dfc:	99 27       	eor	r25, r25
    2dfe:	72 9f       	mul	r23, r18
    2e00:	b0 0d       	add	r27, r0
    2e02:	e1 1d       	adc	r30, r1
    2e04:	f9 1f       	adc	r31, r25
    2e06:	63 9f       	mul	r22, r19
    2e08:	b0 0d       	add	r27, r0
    2e0a:	e1 1d       	adc	r30, r1
    2e0c:	f9 1f       	adc	r31, r25
    2e0e:	bd 01       	movw	r22, r26
    2e10:	cf 01       	movw	r24, r30
    2e12:	11 24       	eor	r1, r1
    2e14:	08 95       	ret

00002e16 <__udivmodsi4>:
    2e16:	a1 e2       	ldi	r26, 0x21	; 33
    2e18:	1a 2e       	mov	r1, r26
    2e1a:	aa 1b       	sub	r26, r26
    2e1c:	bb 1b       	sub	r27, r27
    2e1e:	fd 01       	movw	r30, r26
    2e20:	0d c0       	rjmp	.+26     	; 0x2e3c <__udivmodsi4_ep>

00002e22 <__udivmodsi4_loop>:
    2e22:	aa 1f       	adc	r26, r26
    2e24:	bb 1f       	adc	r27, r27
    2e26:	ee 1f       	adc	r30, r30
    2e28:	ff 1f       	adc	r31, r31
    2e2a:	a2 17       	cp	r26, r18
    2e2c:	b3 07       	cpc	r27, r19
    2e2e:	e4 07       	cpc	r30, r20
    2e30:	f5 07       	cpc	r31, r21
    2e32:	20 f0       	brcs	.+8      	; 0x2e3c <__udivmodsi4_ep>
    2e34:	a2 1b       	sub	r26, r18
    2e36:	b3 0b       	sbc	r27, r19
    2e38:	e4 0b       	sbc	r30, r20
    2e3a:	f5 0b       	sbc	r31, r21

00002e3c <__udivmodsi4_ep>:
    2e3c:	66 1f       	adc	r22, r22
    2e3e:	77 1f       	adc	r23, r23
    2e40:	88 1f       	adc	r24, r24
    2e42:	99 1f       	adc	r25, r25
    2e44:	1a 94       	dec	r1
    2e46:	69 f7       	brne	.-38     	; 0x2e22 <__udivmodsi4_loop>
    2e48:	60 95       	com	r22
    2e4a:	70 95       	com	r23
    2e4c:	80 95       	com	r24
    2e4e:	90 95       	com	r25
    2e50:	9b 01       	movw	r18, r22
    2e52:	ac 01       	movw	r20, r24
    2e54:	bd 01       	movw	r22, r26
    2e56:	cf 01       	movw	r24, r30
    2e58:	08 95       	ret

00002e5a <__prologue_saves__>:
    2e5a:	2f 92       	push	r2
    2e5c:	3f 92       	push	r3
    2e5e:	4f 92       	push	r4
    2e60:	5f 92       	push	r5
    2e62:	6f 92       	push	r6
    2e64:	7f 92       	push	r7
    2e66:	8f 92       	push	r8
    2e68:	9f 92       	push	r9
    2e6a:	af 92       	push	r10
    2e6c:	bf 92       	push	r11
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	ca 1b       	sub	r28, r26
    2e84:	db 0b       	sbc	r29, r27
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	09 94       	ijmp

00002e92 <__epilogue_restores__>:
    2e92:	2a 88       	ldd	r2, Y+18	; 0x12
    2e94:	39 88       	ldd	r3, Y+17	; 0x11
    2e96:	48 88       	ldd	r4, Y+16	; 0x10
    2e98:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ea0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ea2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ea4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ea6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ea8:	df 80       	ldd	r13, Y+7	; 0x07
    2eaa:	ee 80       	ldd	r14, Y+6	; 0x06
    2eac:	fd 80       	ldd	r15, Y+5	; 0x05
    2eae:	0c 81       	ldd	r16, Y+4	; 0x04
    2eb0:	1b 81       	ldd	r17, Y+3	; 0x03
    2eb2:	aa 81       	ldd	r26, Y+2	; 0x02
    2eb4:	b9 81       	ldd	r27, Y+1	; 0x01
    2eb6:	ce 0f       	add	r28, r30
    2eb8:	d1 1d       	adc	r29, r1
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	f8 94       	cli
    2ebe:	de bf       	out	0x3e, r29	; 62
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	cd bf       	out	0x3d, r28	; 61
    2ec4:	ed 01       	movw	r28, r26
    2ec6:	08 95       	ret

00002ec8 <_exit>:
    2ec8:	f8 94       	cli

00002eca <__stop_program>:
    2eca:	ff cf       	rjmp	.-2      	; 0x2eca <__stop_program>
